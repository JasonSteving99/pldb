import header.scroll

title Joyfully Universal Language for (Inline) Assembly

title Joyfully Universal Language for (Inline) Assembly - Programming language
 hidden

html
 <a class="prevLang" href="emerald.html">&lt;</a>
 <a class="nextLang" href="qcl.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/julia-lang.pldb

startColumns 4

html <div class="quickLinks"></div>

* Joyfully Universal Language for (Inline) Assembly is a <a href="../lists/languages.html?filter=pl">programming language</a>.
 link ../lists/languages.html?filter=0 0

kpiTable
 #2053 <span title="TotalRank: 2526 Jobs: 103 Users: 2797 Facts: 1451 Links: 972">on PLDB</span>
 0 <span title="Books about or leveraging Joyfully Universal Language for (Inline) Assembly">Books</span>
 0 <span title="Academic publications about or leveraging Joyfully Universal Language for (Inline) Assembly">Papers</span>

* JULIA is an intermediate language that can compile to various different backends (EVM 1.0, EVM 1.5 and eWASM are planned). Because of that, it is designed to be a usable common denominator of all three platforms. It can already be used for “inline assembly” inside Solidity and future versions of the Solidity compiler will even use JULIA as intermediate language. It should also be easy to build high-level optimizer stages for JULIA.

- Joyfully Universal Language for (Inline) Assembly first developed in <a href="../lists/originCommunities.html#httpsGithubComEthereum">https://github.com/ethereum</a>
- Read more about Joyfully Universal Language for (Inline) Assembly on the web: 1.
 https://solidity.readthedocs.io/en/v0.4.21/julia.html 1.
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://pldb.com/edit/julia-lang">Improve our Joyfully Universal Language for (Inline) Assembly file</a>

html <br>

codeWithHeader Example from the web:
 {
     function power(base:u256, exponent:u256) -&gt; result:u256
     {
         switch exponent
         case 0:u256 { result := 1:u256 }
         case 1:u256 { result := base }
         default:
         {
             result := power(mul(base, base), div(exponent, 2:u256))
             switch mod(exponent, 2:u256)
                 case 1:u256 { result := mul(base, result) }
         }
     }
 }

endColumns

keyboardNav emerald.html qcl.html

import ../footer.scroll
