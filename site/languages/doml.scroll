import header.scroll

title DOML

title DOML - Data notation
 hidden

html
 <a class="prevLang" href="mech-lang.html">&lt;</a>
 <a class="nextLang" href="nxc.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/doml.pldb

startColumns 4

html <div class="quickLinks"><a href="https://github.com/DOML-Lang/DOML"><svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"/></svg></a></div>

* DOML, aka Data Oriented Markup Language, is a <a href="../lists/languages.html?filter=dataNotation">data notation</a> created in 2017.
 link ../lists/languages.html?filter=2017 2017

kpiTable
 #894 <span title="TotalRank: 1451 Jobs: 103 Users: 2332 Facts: 376 Links: 972">on PLDB</span>
 6 Years Old
 0 <span title="Books about or leveraging DOML">Books</span>
 0 <span title="Academic publications about or leveraging DOML">Papers</span>

* The specification document for DOML

- DOML is developed on <a href="https://github.com/DOML-Lang/DOML">GitHub</a> and has 4 stars
- DOML first developed in <a href="../lists/originCommunities.html#httpsGithubComDomlLang">https://github.com/DOML-Lang</a>
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://pldb.com/edit/doml">Improve our DOML file</a>

html <br>

codeWithHeader Example from the web:
 # Version 0.3
 // Construct a new Color
 Test = Color() {
   RGB = 255, 64, 128,
 }
 
 // Constructors do exist
 // the parameter names are purely for your own merit, they will check if its possible however (will be possible on most systems)
 TheSame = Color::Normalized(r: 1, g: 0.25, b: 0.5) {
   Name = &quot;Bob&quot;
 }
 
 // You can also just declare an object without scoping it
 Other = Color()
 Other.Name = &quot;X&quot;
 
 // You can declare random other values
 MyValue = 2
 
 // You can also edit the original Test at any point EITHER by doing
 Test.R = 50
 // Or by doing
 Test.{
   G = 128
 }
 
 // You can declare arrays like
 ArrayObject = []Color {
   ::Normalized(0.95, 0.55, 0.22){
     Name = &quot;Other&quot;, // Trailing commas are always allowed
   },
   // You can still do an empty construction
   ::() {
     RGB = 50, 25, 125,
   },
   // And thus you can leave out the ::()
   {
     RGB = 50, 25, 125,
   },
 }
 
 // You can also copy objects by doing
 NewObj = Other
 
 // Or can do something like
 NewObj.Name = ArrayObject[0].Name
 
 // You can also declare arrays inside object definitions
 MyTags = Tags() {
   // Note: all have to be of the same type
   SetTags = [&quot;Hello&quot;, &quot;Other&quot;, &quot;bits&quot;, &quot;bobs&quot;, &quot;kick&quot;]
   Name = MyTags.GetTags[0] // And indexing them works like you would think
 }
 
 // You can declare dictionaries like
 // Dictionaries within objects can also be created similarly
 MyDictionary = [String : Color] {
   { 
     &quot;Bob&quot; : Color::Normalized(0.5, 1.2, 3.5) {
       Name = &quot;Bob&#39;s Color&quot;
     }
   },
 }
 // No need to keep classes around in this example
 # Deinit all

endColumns

keyboardNav mech-lang.html nxc.html

import ../footer.scroll
