import header.scroll

title LookML

title LookML - Programming language
 hidden

html
 <a class="prevLang" href="noms-db.html">&lt;</a>
 <a class="nextLang" href="htmx.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/lookml.pldb

startColumns 4

html <div class="quickLinks"><a href="https://docs.looker.com/data-modeling/learning-lookml/what-is-lookml"><svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M12.7166 3.79541C12.2835 3.49716 11.7165 3.49716 11.2834 3.79541L4.14336 8.7121C3.81027 8.94146 3.60747 9.31108 3.59247 9.70797C3.54064 11.0799 3.4857 13.4824 3.63658 15.1877C3.7504 16.4742 4.05336 18.1747 4.29944 19.4256C4.41371 20.0066 4.91937 20.4284 5.52037 20.4284H8.84433C8.98594 20.4284 9.10074 20.3111 9.10074 20.1665V15.9754C9.10074 14.9627 9.90433 14.1417 10.8956 14.1417H13.4091C14.4004 14.1417 15.204 14.9627 15.204 15.9754V20.1665C15.204 20.3111 15.3188 20.4284 15.4604 20.4284H18.4796C19.0806 20.4284 19.5863 20.0066 19.7006 19.4256C19.9466 18.1747 20.2496 16.4742 20.3634 15.1877C20.5143 13.4824 20.4594 11.0799 20.4075 9.70797C20.3925 9.31108 20.1897 8.94146 19.8566 8.7121L12.7166 3.79541ZM10.4235 2.49217C11.3764 1.83602 12.6236 1.83602 13.5765 2.49217L20.7165 7.40886C21.4457 7.91098 21.9104 8.73651 21.9448 9.64736C21.9966 11.0178 22.0564 13.5119 21.8956 15.3292C21.7738 16.7067 21.4561 18.4786 21.2089 19.7353C20.9461 21.0711 19.7924 22.0001 18.4796 22.0001H15.4604C14.4691 22.0001 13.6655 21.1791 13.6655 20.1665V15.9754C13.6655 15.8307 13.5507 15.7134 13.4091 15.7134H10.8956C10.754 15.7134 10.6392 15.8307 10.6392 15.9754V20.1665C10.6392 21.1791 9.83561 22.0001 8.84433 22.0001H5.52037C4.20761 22.0001 3.05389 21.0711 2.79113 19.7353C2.54392 18.4786 2.22624 16.7067 2.10437 15.3292C1.94358 13.5119 2.00338 11.0178 2.05515 9.64736C2.08957 8.73652 2.55427 7.91098 3.28346 7.40886L10.4235 2.49217Z"/></svg></a></div>

* LookML is a <a href="../lists/languages.html?filter=pl">programming language</a> created in 2012.
 link ../lists/languages.html?filter=2012 2012

kpiTable
 #633 <span title="TotalRank: 1207 Jobs: 103 Users: 1117 Facts: 132 Links: 972">on PLDB</span>
 11 Years Old
 201 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging LookML">Books</span>
 0 <span title="Academic publications about or leveraging LookML">Papers</span>
 5k <span title="LookML repos on GitHub.">Repos</span>

* 

- LookML website
 https://docs.looker.com/data-modeling/learning-lookml/what-is-lookml
- There are at least 5,427 LookML repos on <a href="https://github.com/search?q=language:LookML">GitHub</a>
- LookML first developed in <a href="../lists/originCommunities.html#looker">Looker</a>
- file extensions for LookML include lookml, modellkml and viewlkml
- The  Google BigQuery Public Dataset GitHub snapshot shows 47 users using LookML in 185 repos on <a href="https://api.github.com/search/repositories?q=language:LookML">GitHub</a>
- GitHub supports <a href="https://github.com/atom/language-yaml" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for LookML
- Read more about LookML on the web: 1.
 https://docs.looker.com/relnotes/v1-release-notes#looker_1.10.13 1.
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://pldb.com/edit/lookml">Improve our LookML file</a>

html <br>

codeWithHeader Example from the web:
 ######################################
 # FILE: ecommercestore.model.lkml    #
 # Define the explores and join logic #
 ######################################
 connection: order_database
 include: &quot;*.view.lkml&quot;
 explore: orders {
   join: customers {
     sql_on: ${orders.customer_id} = ${customers.id} ;;
   }
 }
 
 ##########################################################
 # FILE: orders.view.lkml                                 #
 # Define the dimensions and measures for the ORDERS view #
 ##########################################################
 view: orders {
   dimension: id {
     primary_key: yes
     type: number
     sql: ${TABLE}.id ;;
   }
   dimension: customer_id {      # field: orders.customer_id
     sql: ${TABLE}.customer_id ;;
   }
   dimension: amount {           # field: orders.amount
     type: number
     value_format: &quot;0.00&quot;
     sql: ${TABLE}.amount ;;
   }
   dimension_group: created {                # generates fields:
     type: time                              # orders.created_time, orders.created_date
     timeframes: [time, date, week, month]   # orders.created_week, orders.created_month
     sql: ${TABLE}.created_at ;;
   }
   measure: count {             # field: orders.count
     type: count                # creates a sql COUNT(*)
     drill_fields: [drill_set*] # list of fields to show when someone clicks &#39;ORDERS Count&#39;
   }
   measure: total_amount {
     type: sum
     sql: ${amount} ;;
   }
   set: drill_set {
     fields: [id, created_time, customers.name, amount]
   }
 }
 
 #############################################################
 # FILE: customers.view.lkml                                 #
 # Define the dimensions and measures for the CUSTOMERS view #
 #############################################################
 view: customers {
   dimension: id {
     primary_key: yes
     type: number
     sql: ${TABLE}.id ;;
   }
   dimension: city {                    # field: customers.city
     sql: ${TABLE}.city ;;
   }
   dimension: state {                   # field: customers.state
     sql: ${TABLE}.state ;;
   }
   dimension: name {
     sql: CONCAT(${TABLE}.firstname, &quot; &quot;, ${TABLE}.lastname) ;;
   }
   measure: count {             # field: customers.count
     type: count                # creates a sql COUNT(*)
     drill_fields: [drill_set*] # fields to show when someone clicks &#39;CUSTOMERS Count&#39;
   }
   set: drill_set {                     # set: customers.drill_set
     fields: [id, state, orders.count]  # list of fields to show when someone clicks &#39;CUSTOMERS Count&#39;
   }
 }

codeWithHeader Example from <a href='https://github.com/atom/language-yaml'>Linguist</a>:
 - view: comments
   fields:
 
   - dimension: id
     primary_key: true
     type: int
     sql: ${TABLE}.id
 
   - dimension: body
     sql: ${TABLE}.body
 
   - dimension_group: created
     type: time
     timeframes: [time, date, week, month]
     sql: ${TABLE}.created_at
 
   - dimension: headline_id
     type: int
     hidden: true
     sql: ${TABLE}.headline_id
 
   - dimension_group: updated
     type: time
     timeframes: [time, date, week, month]
     sql: ${TABLE}.updated_at
 
   - dimension: user_id
     type: int
     hidden: true
     sql: ${TABLE}.user_id
 
   - measure: count
     type: count
     detail: detail*
 
 
   # ----- Detail ------
   sets:
     detail:
       - id
       - headlines.id
       - headlines.name
       - users.id

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   # A comment
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token #
  Example
   # A comment
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

keyboardNav noms-db.html htmx.html

import ../footer.scroll
