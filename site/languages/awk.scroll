import header.scroll

title awk

title awk - Programming language
 hidden

html
 <a class="prevLang" href="basic.html">&lt;</a>
 <a class="nextLang" href="delphi.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/awk.pldb

startColumns 4

html <div class="quickLinks"><a href="http://www.cs.princeton.edu/~bwk/btl.mirror/"><svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M12.7166 3.79541C12.2835 3.49716 11.7165 3.49716 11.2834 3.79541L4.14336 8.7121C3.81027 8.94146 3.60747 9.31108 3.59247 9.70797C3.54064 11.0799 3.4857 13.4824 3.63658 15.1877C3.7504 16.4742 4.05336 18.1747 4.29944 19.4256C4.41371 20.0066 4.91937 20.4284 5.52037 20.4284H8.84433C8.98594 20.4284 9.10074 20.3111 9.10074 20.1665V15.9754C9.10074 14.9627 9.90433 14.1417 10.8956 14.1417H13.4091C14.4004 14.1417 15.204 14.9627 15.204 15.9754V20.1665C15.204 20.3111 15.3188 20.4284 15.4604 20.4284H18.4796C19.0806 20.4284 19.5863 20.0066 19.7006 19.4256C19.9466 18.1747 20.2496 16.4742 20.3634 15.1877C20.5143 13.4824 20.4594 11.0799 20.4075 9.70797C20.3925 9.31108 20.1897 8.94146 19.8566 8.7121L12.7166 3.79541ZM10.4235 2.49217C11.3764 1.83602 12.6236 1.83602 13.5765 2.49217L20.7165 7.40886C21.4457 7.91098 21.9104 8.73651 21.9448 9.64736C21.9966 11.0178 22.0564 13.5119 21.8956 15.3292C21.7738 16.7067 21.4561 18.4786 21.2089 19.7353C20.9461 21.0711 19.7924 22.0001 18.4796 22.0001H15.4604C14.4691 22.0001 13.6655 21.1791 13.6655 20.1665V15.9754C13.6655 15.8307 13.5507 15.7134 13.4091 15.7134H10.8956C10.754 15.7134 10.6392 15.8307 10.6392 15.9754V20.1665C10.6392 21.1791 9.83561 22.0001 8.84433 22.0001H5.52037C4.20761 22.0001 3.05389 21.0711 2.79113 19.7353C2.54392 18.4786 2.22624 16.7067 2.10437 15.3292C1.94358 13.5119 2.00338 11.0178 2.05515 9.64736C2.08957 8.73652 2.55427 7.91098 3.28346 7.40886L10.4235 2.49217Z"/></svg></a> <a href="https://en.wikipedia.org/wiki/AWK"><svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="98.05px" height="98.05px" viewBox="0 0 98.05 98.05" style="enable-background:new 0 0 98.05 98.05;" xml:space="preserve"><path d="M98.023,17.465l-19.584-0.056c-0.004,0.711-0.006,1.563-0.017,2.121c1.664,0.039,5.922,0.822,7.257,4.327L66.92,67.155 c-0.919-2.149-9.643-21.528-10.639-24.02l9.072-18.818c1.873-2.863,5.455-4.709,8.918-4.843l-0.01-1.968L55.42,17.489 c-0.045,0.499,0.001,1.548-0.068,2.069c5.315,0.144,7.215,1.334,5.941,4.508c-2.102,4.776-6.51,13.824-7.372,15.475 c-2.696-5.635-4.41-9.972-7.345-16.064c-1.266-2.823,1.529-3.922,4.485-4.004v-1.981l-21.82-0.067 c0.016,0.93-0.021,1.451-0.021,2.131c3.041,0.046,6.988,0.371,8.562,3.019c2.087,4.063,9.044,20.194,11.149,24.514 c-2.685,5.153-9.207,17.341-11.544,21.913c-3.348-7.43-15.732-36.689-19.232-44.241c-1.304-3.218,3.732-5.077,6.646-5.213 l0.019-2.148L0,17.398c0.005,0.646,0.027,1.71,0.029,2.187c4.025-0.037,9.908,6.573,11.588,10.683 c7.244,16.811,14.719,33.524,21.928,50.349c0.002,0.029,2.256,0.059,2.281,0.008c4.717-9.653,10.229-19.797,15.206-29.56 L63.588,80.64c0.005,0.004,2.082,0.016,2.093,0.007c7.962-18.196,19.892-46.118,23.794-54.933c1.588-3.767,4.245-6.064,8.543-6.194 l0.032-1.956L98.023,17.465z"/></svg></a> <a href="https://reddit.com/r/awk"><svg role="img" width="32px" height="32px" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg"><path d="M 18.65625 4 C 16.558594 4 15 5.707031 15 7.65625 L 15 11.03125 C 12.242188 11.175781 9.742188 11.90625 7.71875 13.0625 C 6.945313 12.316406 5.914063 12 4.90625 12 C 3.816406 12 2.707031 12.355469 1.9375 13.21875 L 1.9375 13.25 L 1.90625 13.28125 C 1.167969 14.203125 0.867188 15.433594 1.0625 16.65625 C 1.242188 17.777344 1.898438 18.917969 3.03125 19.65625 C 3.023438 19.769531 3 19.882813 3 20 C 3 22.605469 4.574219 24.886719 6.9375 26.46875 C 9.300781 28.050781 12.488281 29 16 29 C 19.511719 29 22.699219 28.050781 25.0625 26.46875 C 27.425781 24.886719 29 22.605469 29 20 C 29 19.882813 28.976563 19.769531 28.96875 19.65625 C 30.101563 18.917969 30.757813 17.777344 30.9375 16.65625 C 31.132813 15.433594 30.832031 14.203125 30.09375 13.28125 L 30.0625 13.25 C 29.292969 12.386719 28.183594 12 27.09375 12 C 26.085938 12 25.054688 12.316406 24.28125 13.0625 C 22.257813 11.90625 19.757813 11.175781 17 11.03125 L 17 7.65625 C 17 6.675781 17.558594 6 18.65625 6 C 19.175781 6 19.820313 6.246094 20.8125 6.59375 C 21.65625 6.890625 22.75 7.21875 24.15625 7.3125 C 24.496094 8.289063 25.414063 9 26.5 9 C 27.875 9 29 7.875 29 6.5 C 29 5.125 27.875 4 26.5 4 C 25.554688 4 24.738281 4.535156 24.3125 5.3125 C 23.113281 5.242188 22.246094 4.992188 21.46875 4.71875 C 20.566406 4.402344 19.734375 4 18.65625 4 Z M 16 13 C 19.152344 13 21.964844 13.867188 23.9375 15.1875 C 25.910156 16.507813 27 18.203125 27 20 C 27 21.796875 25.910156 23.492188 23.9375 24.8125 C 21.964844 26.132813 19.152344 27 16 27 C 12.847656 27 10.035156 26.132813 8.0625 24.8125 C 6.089844 23.492188 5 21.796875 5 20 C 5 18.203125 6.089844 16.507813 8.0625 15.1875 C 10.035156 13.867188 12.847656 13 16 13 Z M 4.90625 14 C 5.285156 14 5.660156 14.09375 5.96875 14.25 C 4.882813 15.160156 4.039063 16.242188 3.53125 17.4375 C 3.277344 17.117188 3.125 16.734375 3.0625 16.34375 C 2.953125 15.671875 3.148438 14.976563 3.46875 14.5625 C 3.472656 14.554688 3.464844 14.539063 3.46875 14.53125 C 3.773438 14.210938 4.3125 14 4.90625 14 Z M 27.09375 14 C 27.6875 14 28.226563 14.210938 28.53125 14.53125 C 28.535156 14.535156 28.527344 14.558594 28.53125 14.5625 C 28.851563 14.976563 29.046875 15.671875 28.9375 16.34375 C 28.875 16.734375 28.722656 17.117188 28.46875 17.4375 C 27.960938 16.242188 27.117188 15.160156 26.03125 14.25 C 26.339844 14.09375 26.714844 14 27.09375 14 Z M 11 16 C 9.894531 16 9 16.894531 9 18 C 9 19.105469 9.894531 20 11 20 C 12.105469 20 13 19.105469 13 18 C 13 16.894531 12.105469 16 11 16 Z M 21 16 C 19.894531 16 19 16.894531 19 18 C 19 19.105469 19.894531 20 21 20 C 22.105469 20 23 19.105469 23 18 C 23 16.894531 22.105469 16 21 16 Z M 21.25 21.53125 C 20.101563 22.597656 18.171875 23.28125 16 23.28125 C 13.828125 23.28125 11.898438 22.589844 10.75 21.65625 C 11.390625 23.390625 13.445313 25 16 25 C 18.554688 25 20.609375 23.398438 21.25 21.53125 Z"/></svg></a> <a href="https://www.gnu.org/software/gawk/manual/gawk.html"><svg viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg"><g transform="matrix(1, 0, 0, 1, 13.859316, 9.109739)"><g><g><path d="M340.732,0H55v485h375V94.518L340.732,0z M345,26.364L405.1,90H345V26.364z M415,470H70V15h260v90h85V470z"/><rect x="102.5" y="191" width="280" height="15"/><rect x="102.5" y="141" width="120" height="15"/><rect x="102.5" y="241" width="280" height="15"/><rect x="102.5" y="291" width="280" height="15"/><rect x="102.5" y="341" width="280" height="15"/><rect x="102.5" y="391" width="280" height="15"/></g></g></g></svg></a></div>

* awk, aka Aho, Weinberger, Kernighan, is a <a href="../lists/languages.html?filter=pl">programming language</a> created in 1977 by Alfred Aho and Peter J. Weinberger and Brian Kernighan.
 link ../lists/languages.html?filter=1977 1977
 link ../lists/creators.html#alfredAho Alfred Aho
 link ../lists/creators.html#peterJWeinberger Peter J. Weinberger
 link ../lists/creators.html#brianKernighan Brian Kernighan

kpiTable
 #61 <span title="TotalRank: 225 Jobs: 91 Users: 215 Facts: 47 Links: 87">on PLDB</span>
 46 Years Old
 4.7k <span title="Crude user estimate from a linear model.">Users</span>
 26 <span title="Books about or leveraging awk">Books</span>
 8 <span title="Academic publications about or leveraging awk">Papers</span>
 3k <span title="awk repos on GitHub.">Repos</span>

* Try now: <a href="https://riju.codes/awk">Riju</a> · <a href="https://tio.run/#awk">TIO</a>

* AWK is a programming language designed for text processing and typically used as a data extraction and reporting tool. It is a standard feature of most Unix-like operating systems. The AWK language is a data-driven scripting language consisting of a set of actions to be taken against streams of textual data – either run directly on files or used as part of a pipeline – for purposes of extracting or transforming text, such as producing formatted reports. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/AWK Read more on Wikipedia...

- awk website
 http://www.cs.princeton.edu/~bwk/btl.mirror/
- awk Wikipedia page
 https://en.wikipedia.org/wiki/AWK
- awk docs
 https://www.gnu.org/software/gawk/manual/gawk.html
- There are at least 2,552 awk repos on <a href="https://github.com/search?q=language:Awk">GitHub</a>
- awk first developed in <a href="../lists/originCommunities.html#bellLabs">Bell Labs</a>
- file extensions for awk include awk, auk, gawk, mawk and nawk
- The  Google BigQuery Public Dataset GitHub snapshot shows 14k users using awk in 21k repos on <a href="https://api.github.com/search/repositories?q=language:Awk">GitHub</a>
- There are 1,929 members in the <a href="https://reddit.com/r/awk">awk subreddit</a>
- There are 14 <a href="https://projecteuler.net/language=AWK">Project Euler</a> users using awk
- Explore awk snippets on <a href="http://www.rosettacode.org/wiki/Category:AWK">Rosetta Code</a>
- awk on HOPL
 https://hopl.info/showlanguage.prx?exp=1844
- awk ranks #37 in the <a href="https://www.tiobe.com/tiobe-index/">TIOBE Index</a>
- awk Ubuntu package
 https://packages.ubuntu.com/jammy/gawk
- <a href="pygments.html">Pygments</a> supports <a href="https://github.com/pygments/pygments/blob/master/pygments/lexers/textedit.py">syntax highlighting</a> for awk
- GitHub supports <a href="https://github.com/github-linguist/awk-sublime" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for awk
- awk appears in the <a href="https://github.com/mame/quine-relay">Quine Relay</a> project
- Indeed.com has 7 matches for <a href="https://www.indeed.com/jobs?q=awk engineer">"awk engineer"</a>.
- See also: (14 related languages)<a href="c.html">C</a>, <a href="snobol.html">SNOBOL</a>, <a href="bourne-shell.html">Bourne shell</a>, <a href="tcl.html">Tcl</a>, <a href="ampl.html">AMPL</a>, <a href="perl.html">Perl</a>, <a href="lua.html">Lua</a>, <a href="regex.html">Regular Expressions</a>, <a href="unix.html">Unix</a>, <a href="sed.html">sed</a>, <a href="freebsd.html">FreeBSD</a>, <a href="solaris.html">Solaris</a>, <a href="java.html">Java</a>, <a href="isbn.html">ISBN</a>
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://pldb.com/edit/awk">Improve our awk file</a>

html <br>

codeWithHeader Example from <a href='https://riju.codes/awk'>Riju</a>:
 BEGIN { print &quot;Hello, world!&quot; }
 

codeWithHeader Example from <a href='https://github.com/leachim6/hello-world/blob/main/a/AWK.awk'>hello-world</a>:
 # awk -f awk.awk
 BEGIN { print &quot;Hello World&quot; }
 

codeWithHeader Example from <a href='http://helloworldcollection.de/#Aho%2C'>the Hello World Collection</a>:
 # Hello world in AWK
 
 BEGIN {
   print &quot;Hello World!&quot;
 }

codeWithHeader Example from <a href='https://github.com/github-linguist/awk-sublime'>Linguist</a>:
 #!/bin/awk -f
 
 BEGIN {
   # It is not possible to define output file names here because
   # FILENAME is not define in the BEGIN section
   n = &quot;&quot;;
   printf &quot;Generating data files ...&quot;;
   network_max_bandwidth_in_byte = 10000000;
   network_max_packet_per_second = 1000000;
   last3 = 0;
   last4 = 0;
   last5 = 0;
   last6 = 0;
 }
 {
   if ($1 ~ /Average/)
     { # Skip the Average values
       n = &quot;&quot;;
       next;
     }
 
   if ($2 ~ /all/)
     { # This is the cpu info
       print $3 &gt; FILENAME&quot;.cpu.user.dat&quot;;
 #	  print $4 &gt; FILENAME&quot;.cpu.nice.dat&quot;;
       print $5 &gt; FILENAME&quot;.cpu.system.dat&quot;;
 #     print $6 &gt; FILENAME&quot;.cpu.iowait.dat&quot;;
       print $7 &gt; FILENAME&quot;.cpu.idle.dat&quot;;
       print 100-$7 &gt; FILENAME&quot;.cpu.busy.dat&quot;;
     }
   if ($2 ~ /eth0/)
     { # This is the eth0 network info
       if ($3 &gt; network_max_packet_per_second)
 	print last3 &gt; FILENAME&quot;.net.rxpck.dat&quot;; # Total number of packets received per second.
       else
 	{
 	  last3 = $3;
 	  print $3 &gt; FILENAME&quot;.net.rxpck.dat&quot;; # Total number of packets received per second.
 	}
       if ($4 &gt; network_max_packet_per_second)
 	print last4 &gt; FILENAME&quot;.net.txpck.dat&quot;; # Total number of packets transmitted per second.
       else
 	{
 	  last4 = $4;
 	  print $4 &gt; FILENAME&quot;.net.txpck.dat&quot;; # Total number of packets transmitted per second.
 	}
       if ($5 &gt; network_max_bandwidth_in_byte)
 	print last5 &gt; FILENAME&quot;.net.rxbyt.dat&quot;; # Total number of bytes received per second.
       else
 	{
 	  last5 = $5;
 	  print $5 &gt; FILENAME&quot;.net.rxbyt.dat&quot;; # Total number of bytes received per second.
 	}
       if ($6 &gt; network_max_bandwidth_in_byte)
 	print last6 &gt; FILENAME&quot;.net.txbyt.dat&quot;; # Total number of bytes transmitted per second.
       else
 	{
 	  last6 = $6;
 	  print $6 &gt; FILENAME&quot;.net.txbyt.dat&quot;; # Total number of bytes transmitted per second.
 	}
 #     print $7 &gt; FILENAME&quot;.net.rxcmp.dat&quot;; # Number of compressed packets received per second (for cslip etc.).
 #     print $8 &gt; FILENAME&quot;.net.txcmp.dat&quot;; # Number of compressed packets transmitted per second.
 #     print $9 &gt; FILENAME&quot;.net.rxmcst.dat&quot;; # Number of multicast packets received per second.
     }
 
   # Detect which is the next info to be parsed
   if ($2 ~ /proc|cswch|tps|kbmemfree|totsck/)
     {
       n = $2;
     }
 
   # Only get lines with numbers (real data !)
   if ($2 ~ /[0-9]/)
     {
       if (n == &quot;proc/s&quot;)
 	{ # This is the proc/s info
 	  print $2 &gt; FILENAME&quot;.proc.dat&quot;;
 #	  n = &quot;&quot;;
 	}
       if (n == &quot;cswch/s&quot;)
 	{ # This is the context switches per second info
 	  print $2 &gt; FILENAME&quot;.ctxsw.dat&quot;;
 #	  n = &quot;&quot;;
 	}
       if (n == &quot;tps&quot;)
 	{ # This is the disk info
 	  print $2 &gt; FILENAME&quot;.disk.tps.dat&quot;; # total transfers per second
 	  print $3 &gt; FILENAME&quot;.disk.rtps.dat&quot;; # read requests per second
 	  print $4 &gt; FILENAME&quot;.disk.wtps.dat&quot;; # write requests per second
 	  print $5 &gt; FILENAME&quot;.disk.brdps.dat&quot;; # block reads per second
 	  print $6 &gt; FILENAME&quot;.disk.bwrps.dat&quot;; # block writes per second
 #	  n = &quot;&quot;;
 	}
       if (n == &quot;kbmemfree&quot;)
 	{ # This is the mem info
 	  print $2 &gt; FILENAME&quot;.mem.kbmemfree.dat&quot;; # Amount of free memory available in kilobytes.
 	  print $3 &gt; FILENAME&quot;.mem.kbmemused.dat&quot;; # Amount of used memory in kilobytes. This does not take into account memory used by the kernel itself.
 	  print $4 &gt; FILENAME&quot;.mem.memused.dat&quot;; # Percentage of used memory.
 #         It appears the kbmemshrd has been removed from the sysstat output - ntolia
 #	  print $X &gt; FILENAME&quot;.mem.kbmemshrd.dat&quot;; # Amount of memory shared by the system in kilobytes.  Always zero with 2.4 kernels.
 #	  print $5 &gt; FILENAME&quot;.mem.kbbuffers.dat&quot;; # Amount of memory used as buffers by the kernel in kilobytes.
 	  print $6 &gt; FILENAME&quot;.mem.kbcached.dat&quot;; # Amount of memory used to cache data by the kernel in kilobytes.
 #	  print $7 &gt; FILENAME&quot;.mem.kbswpfree.dat&quot;; # Amount of free swap space in kilobytes.
 #	  print $8 &gt; FILENAME&quot;.mem.kbswpused.dat&quot;; # Amount of used swap space in kilobytes.
 	  print $9 &gt; FILENAME&quot;.mem.swpused.dat&quot;; # Percentage of used swap space.
 #	  n = &quot;&quot;;
  	}
       if (n == &quot;totsck&quot;)
 	{ # This is the socket info
 	  print $2 &gt; FILENAME&quot;.sock.totsck.dat&quot;; # Total number of used sockets.
 	  print $3 &gt; FILENAME&quot;.sock.tcpsck.dat&quot;; # Number of TCP sockets currently in use.
 #	  print $4 &gt; FILENAME&quot;.sock.udpsck.dat&quot;; # Number of UDP sockets currently in use.
 #	  print $5 &gt; FILENAME&quot;.sock.rawsck.dat&quot;; # Number of RAW sockets currently in use.
 #	  print $6 &gt; FILENAME&quot;.sock.ip-frag.dat&quot;; # Number of IP fragments currently in use.
 #	  n = &quot;&quot;;
  	}
     }
 }
 END {
   print &quot; &#39;&quot; FILENAME &quot;&#39; done.&quot;;
 }
 

codeWithHeader Example from <a href='https://en.wikipedia.org/wiki/AWK'>Wikipedia</a>:
 BEGIN {
     pattern = ARGV[1]
     for (i = 1; i &lt; ARGC; i++) # remove first argument
         ARGV[i] = ARGV[i + 1]
     ARGC--
     if (ARGC == 1) { # the pattern was the only thing, so force read from standard input (used by book)
         ARGC = 2
         ARGV[1] = &quot;-&quot;
     }
 }
 $0 ~ pattern { print FILENAME &quot;:&quot; $0 }

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Integers
  FeatureLink ../features/hasIntegers.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   # [0-9]+
 row
  Feature Floats
  FeatureLink ../features/hasFloats.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   # [0-9][0-9]*\.[0-9]+([eE][0-9]+)?[fd]?
 row
  Feature Hexadecimals
  FeatureLink ../features/hasHexadecimals.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   # 0x[0-9a-fA-F]+
 row
  Feature Strings
  FeatureLink ../features/hasStrings.html
  Supported <span class="hasFeature">✓</span>
  Token "
  Example
   "Hello world"
 row
  Feature Print() Debugging
  FeatureLink ../features/hasPrintDebugging.html
  Supported <span class="hasFeature">✓</span>
  Token print
  Example
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token #
  Example
   # A comment
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

## Books about awk on goodreads
pipeTable
 title|titleLink|author|year|reviews|ratings|rating
 The AWK Programming Language|https://www.goodreads.com/search?q=The AWK Programming Language Alfred V. Aho|Alfred V. Aho|1988|11|142|4.25
 Effective awk Programming: Text Processing and Pattern Matching|https://www.goodreads.com/search?q=Effective awk Programming: Text Processing and Pattern Matching Arnold Robbins|Arnold Robbins|1997|2|37|3.97
 GAWK: Effective Awk Programming|https://www.goodreads.com/search?q=GAWK: Effective Awk Programming Arnold D. Robbins|Arnold D. Robbins|1996|0|1|4.00
 AWK Programming: Questions and Answers|https://www.goodreads.com/search?q=AWK Programming: Questions and Answers George Duckett|George Duckett|2014|0|0|0.0
 awk Programmer's Toolbox: Advanced awk and Unix Shell Scripting Examples and Techniques|https://www.goodreads.com/search?q=awk Programmer's Toolbox: Advanced awk and Unix Shell Scripting Examples and Techniques Steve Myers|Steve Myers|2013|0|1|5.00
 Awk Programming (2 Days)|https://www.goodreads.com/search?q=Awk Programming (2 Days) Sim McNally|Sim McNally||0|0|0.0

## Books about awk from ISBNdb
pipeTable
 title|titleLink|authors|year|publisher
 sed & awk|https://isbndb.com/book/9781565922259|Dougherty, Dale and Robbins, Arnold|1997|O'Reilly Media
 The AWK Programming Language|https://isbndb.com/book/9780201079814|Aho, Alfred V. and Kernighan, Brian W. and Weinberger, Peter J.|1988|Pearson
 Effective awk Programming (3rd Edition)|https://isbndb.com/book/9780596000707|Robbins, Arnold|2001|O'Reilly Media
 Effective awk Programming: Universal Text Processing and Pattern Matching|https://isbndb.com/book/9781491904619|Robbins, Arnold|2015|O'Reilly Media
 Learning AWK Programming: A fast, and simple cutting-edge utility for text-processing on the Unix-like environment|https://isbndb.com/book/9781788397087|Kalkhanda, Shiwang|2018|Packt Publishing
 Learning AWK Programming: A fast, and simple cutting-edge utility for text-processing on the Unix-like environment|https://isbndb.com/book/9781788391030|Kalkhanda, Shiwang|2018-03-26T00:00:01Z|Packt Publishing
 Hands-On Korn Shell and AWK Scripting: Learn Unix and Linux Programming Through Advanced Scripting Examples|https://isbndb.com/book/9781492724049|Williams, Brian|2013|CreateSpace Independent Publishing Platform
 sed & awk|https://isbndb.com/book/9781449396602|Dale Dougherty; Arnold Robbins|19970301|O'Reilly Media, Inc.
 Effective Awk Programming|https://isbndb.com/book/9781578310005|Arnold Robbins|1997|O'reilly Media
 sed & awk|https://isbndb.com/book/9781449301880|Dale Dougherty; Arnold Robbins|19970301|O'Reilly Media, Inc.
 Effective awk Programming|https://isbndb.com/book/9781491904961|Arnold Robbins|20150303|O'Reilly Media, Inc.
 Effective Awk Programming: A User's Guide For Gnu Awk, Edition 1.0.3|https://isbndb.com/book/9780595100347|Arnold D. Robbins|2000|Iuniverse Inc
 Effective awk Programming|https://isbndb.com/book/9781491904978|Arnold Robbins|20150303|O'Reilly Media, Inc.
 Awk Programming (2 Days)|https://isbndb.com/book/9781562439811|Sim Mcnally|2000|D D C Pub
 Gawk: Effective Awk Programming|https://isbndb.com/book/9781447550839|Arnold Robbins|2011|Lulu.com
 sed and awk Pocket Reference|https://isbndb.com/book/9780596529024|Arnold Robbins|20020612|O'Reilly Media, Inc.
 sed and awk Pocket Reference|https://isbndb.com/book/9780596552022|Arnold Robbins|20020612|O'Reilly Media, Inc.
 Effective Awk Programming: A User's Guide For Gnuawk|https://isbndb.com/book/9780916151881|Arnold D. Robbins|1996|Specialized Systems Consultants
 Unix Command Line And Awk Scripting: Harnessing The Power Of Unix And Linux Programming Environments|https://isbndb.com/book/9781492724315|Dmitri Petrovic|2013|Createspace Independent Publishing Platform
 Advanced Unix Shell Scripting: How To Reduce Your Labor And Increase Your Effectiveness Through Mastery Of Unix Shell Scripting And Awk Programming|https://isbndb.com/book/9781484076385|Praveen Puri|2013|Createspace Independent Publishing Platform

## Publications about awk from Semantic Scholar
pipeTable
 title|titleLink|authors|year|citations|influentialCitations
 The awk programming language|https://www.semanticscholar.org/paper/eae275046b909dec7a062a35862376c750e60463|A. Aho and B. Kernighan and P. Weinberger|1988|464|23
 Awk — a pattern scanning and processing language|https://www.semanticscholar.org/paper/00ff20695a0b6734a0812593b2373cb929b50b8f|A. Aho and B. Kernighan and P. Weinberger|1979|155|7
 AWK and GNU Octave Programming Languages Integrated with Generic Mapping Tools for Geomorphological Analysis|https://www.semanticscholar.org/paper/a33b25d841b65b2b636e26300d6df6af1a86d29f|Polina Lemenkova|2019|41|0
 A walk through AWK|https://www.semanticscholar.org/paper/7824109be5cdea9d5743cb9a4995a161030fc99e|L. Levy|1983|34|0
 A debugger and assertion checker for the Awk programming language|https://www.semanticscholar.org/paper/c3e0c030141740f5949525feeb173bd81f7f3236|M. Auguston and S. Banerjee and M. Mamnani and G. Nabi and J. Reinfelds and U. Sarkans and I. Strand|1996|6|0
 From AWK to Google: Peter Weinberger Talks Search|https://www.semanticscholar.org/paper/808ab018a01eac1ba2a8e60fccc6f1d58ed7f787|L. McLaughlin|2005|1|0
 AWK — A Prototyping Language|https://www.semanticscholar.org/paper/3dc3122a21edf010a1f44872b9cc730916f5171d|L. Levy|1987|1|0
 The awk programming language [Book Review]|https://www.semanticscholar.org/paper/9e42b6a3b8e7a39465cb7172391139d07a42e7ca|Brian and Kemighan and P. Weinberger|1989|1|0

keyboardNav basic.html delphi.html

import ../footer.scroll
