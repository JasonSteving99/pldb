import header.scroll

title Static Typescript

title Static Typescript - Programming language
 hidden

html
 <a class="prevLang" href="ssl.html">&lt;</a>
 <a class="nextLang" href="surge.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/static-typescript.pldb

startColumns 4

html <div class="quickLinks"></div>

* Static Typescript is a <a href="../lists/languages.html?filter=pl">programming language</a> created in 2019.
 link ../lists/languages.html?filter=2019 2019

kpiTable
 #4022 <span title="TotalRank: 3872 Jobs: 103 Users: 2797 Facts: 3162 Links: 972">on PLDB</span>
 4 Years Old
 0 <span title="Books about or leveraging Static Typescript">Books</span>
 0 <span title="Academic publications about or leveraging Static Typescript">Papers</span>

* We present Static TypeScript (STS), a subset of TypeScript (itself, a gradually typed superset of JavaScript), and its compiler/linker toolchain, which is implemented fully in TypeScript and runs in the web browser.

- Static Typescript is a superset of <a href="typescript.html">TypeScript</a>
- Read more about Static Typescript on the web: 1.
 https://www.microsoft.com/en-us/research/publication/static-typescript/ 1.
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://pldb.com/edit/static-typescript">Improve our Static Typescript file</a>

html <br>

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature MultiLine Comments
  FeatureLink ../features/hasMultiLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   /* A comment
   */
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // A comment
 row
  Feature Algebraic Data Type
  FeatureLink ../features/hasAlgebraicTypes.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   declare type numOrString = string | number
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // A comment
 row
  Feature Union Types
  FeatureLink ../features/hasUnionTypes.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   declare type numOrString = string | number
 row
  Feature Single-Type Arrays
  FeatureLink ../features/hasSingleTypeArrays.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   const scores: int[]
 row
  Feature Type Inference
  FeatureLink ../features/hasTypeInference.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Strings
  FeatureLink ../features/hasStrings.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   "hello world"
 row
  Feature Type Parameters
  FeatureLink ../features/hasTypeParameters.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   function identity<T>(arg: T): T {
      return arg;
   }
 row
  Feature Static Typing
  FeatureLink ../features/hasStaticTyping.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Inheritance
  FeatureLink ../features/hasInheritance.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   class B {}
   class A extends B {}
 row
  Feature Print() Debugging
  FeatureLink ../features/hasPrintDebugging.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   console.log("Hi")
 row
  Feature Namespaces
  FeatureLink ../features/hasNamespaces.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // Typescript even supports splitting namespaces across multiple files:
   // Validation.ts
   namespace Validation {
       export interface StringValidator {
           isAcceptable(s: string): boolean;
       }
   }
   // LettersOnlyValidator.ts
   /// <reference path="Validation.ts" />
   namespace Validation {
       const lettersRegexp = /^[A-Za-z]+$/;
       export class LettersOnlyValidator implements StringValidator {
           isAcceptable(s: string) {
               return lettersRegexp.test(s);
           }
       }
   }
 row
  Feature Mixins
  FeatureLink ../features/hasMixins.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // https://www.typescriptlang.org/docs/handbook/mixins.html
   class SmartObject implements Disposable, Activatable {
   }
   // Note: still need to do some runtime ops to make that work.
 row
  Feature Interfaces
  FeatureLink ../features/hasInterfaces.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // https://www.typescriptlang.org/docs/handbook/interfaces.html
   interface SquareConfig {
      color?: string;
      width?: number;
   }
 row
  Feature File Imports
  FeatureLink ../features/hasImports.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   import { ZipCodeValidator } from "./ZipCodeValidator";
   /// <reference path="../typings/jquery.d.ts"/>
   /// <reference path="components/someclass.ts"/>
   import moo = module('moo');
   /// <amd-dependency path="legacy/moduleA" name="moduleA"/>
 row
  Feature Type Casting
  FeatureLink ../features/hasExplicitTypeCasting.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   <number>something;
 row
  Feature Classes
  FeatureLink ../features/hasClasses.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   class Person {}
 row
  Feature Booleans
  FeatureLink ../features/hasBooleans.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   const result = true
 row
  Feature Generics
  FeatureLink ../features/hasGenerics.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   function identity<T>(arg: T): T {
      return arg;
   }
 row
  Feature Abstract Types
  FeatureLink ../features/hasAbstractTypes.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   abstract class Animal {}
   class Dog extends Animal
 row
  Feature Access Modifiers
  FeatureLink ../features/hasAccessModifiers.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   class Person {
     private _age = 2
     public get age() {
       return _age
     }
     protected year = 1990
   }
 row
  Feature Static Methods
  FeatureLink ../features/hasStaticMethods.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   class Person {
     static sayHi() {
       console.log("Hello world")
     }
   }
 row
  Feature Enums
  FeatureLink ../features/hasEnums.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   enum Direction {
    Up,
    Down
   }
 row
  Feature Scientific Notation
  FeatureLink ../features/hasScientificNotation.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Binary Literals
  FeatureLink ../features/hasBinaryNumbers.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // 0[bB][01]+n?
   0b100110100000110011110010010
 row
  Feature Floats
  FeatureLink ../features/hasFloats.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // (\.[0-9]+|[0-9]+\.[0-9]*|[0-9]+)([eE][-+]?[0-9]+)?
   80766866.0
 row
  Feature Hexadecimals
  FeatureLink ../features/hasHexadecimals.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // 0[xX][0-9a-fA-F]+n?
   0x4D06792
 row
  Feature Octals
  FeatureLink ../features/hasOctals.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // 0[oO]?[0-7]+n?
   0o464063622
 row
  Feature Sets
  FeatureLink ../features/hasSets.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   set = new Set()
   set.add("foo")
 row
  Feature Function Composition
  FeatureLink ../features/hasFunctionComposition.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   function o(f, g) {
      return function(x) {
          return f(g(x));
      }
   }
 row
  Feature Destructuring
  FeatureLink ../features/hasDestructuring.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   const o = {p: 42, q: true};
   const {p, q} = o;
 row
  Feature Default Parameters Pattern
  FeatureLink ../features/hasDefaultParameters.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   function multiply(a, b = 1) {
    return a * b;
   }
 row
  Feature Increment and decrement operators
  FeatureLink ../features/hasIncrementAndDecrementOperators.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   let i = 0
   i++
   i--
 row
  Feature Methods
  FeatureLink ../features/hasMethods.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   class Person {
    method1() {}
    method2() {}
   }
 row
  Feature Functions
  FeatureLink ../features/hasFunctions.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   function helloWorld() {console.log("hi")}
 row
  Feature Case Sensitivity
  FeatureLink ../features/isCaseSensitive.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Zero-based numbering
  FeatureLink ../features/hasZeroBasedNumbering.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature While Loops
  FeatureLink ../features/hasWhileLoops.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   let times = 10
   while (times) {times--}
   console.log("done")
 row
  Feature Ternary operators
  FeatureLink ../features/hasTernaryOperators.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   let i = true ? 1 : 0
 row
  Feature Switch Statements
  FeatureLink ../features/hasSwitch.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   var animal = "dog"
   switch (animal) {
    case "dog": console.log("yay"); break;
    case "cat": console.log("oh"); break;
   }
 row
  Feature Letter-first Identifiers
  FeatureLink ../features/letterFirstIdentifiers.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature References
  FeatureLink ../features/hasReferences.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Multiline Strings
  FeatureLink ../features/hasMultilineStrings.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   const lines = `one
   two`
 row
  Feature Anonymous Functions
  FeatureLink ../features/hasAnonymousFunctions.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   (() => console.log("hello world"))()
 row
  Feature Infix Notation
  FeatureLink ../features/hasInfixNotation.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   const six = 2 + 2 + 2
 row
  Feature Implicit Type Casting
  FeatureLink ../features/hasImplicitTypeConversions.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   console.log("hello " + 2)
 row
  Feature Assignment
  FeatureLink ../features/hasAssignment.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   var name = "John"
 row
  Feature Directives
  FeatureLink ../features/hasDirectives.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   "use strict";
   "use asm";
 row
  Feature Generators
  FeatureLink ../features/hasGenerators.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   function* fibonacci(limit) {
       let [prev, curr] = [0, 1];
       while (!limit || curr <= limit) {
           yield curr;
           [prev, curr] = [curr, prev + curr];
       }
   }
   // bounded by upper limit 10
   for (let n of fibonacci(10)) {
       console.log(n);
   }
   // generator without an upper bound limit
   for (let n of fibonacci()) {
       console.log(n);
       if (n > 10000) break;
   }
   // manually iterating
   let fibGen = fibonacci();
   console.log(fibGen.next().value); // 1
   console.log(fibGen.next().value); // 1
   console.log(fibGen.next().value); // 2
   console.log(fibGen.next().value); // 3
   console.log(fibGen.next().value); // 5
   console.log(fibGen.next().value); // 8
   // picks up from where you stopped
   for (let n of fibGen) {
       console.log(n);
       if (n > 10000) break;
   }
 row
  Feature Garbage Collection
  FeatureLink ../features/hasGarbageCollection.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature First-Class Functions
  FeatureLink ../features/hasFirstClassFunctions.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   [2.0,1.1].map(Math.round)
 row
  Feature Exceptions
  FeatureLink ../features/hasExceptions.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   try {
    undefinedFn()
   } catch (err) {
    console.log(err)
   }
 row
  Feature hasDynamicTyping
  FeatureLink ../features/hasDynamicTyping.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Constants
  FeatureLink ../features/hasConstants.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   const one = 1
 row
  Feature Constructors
  FeatureLink ../features/hasConstructors.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   class Person {
    constructor(name) {
      this._name = name
    }
   }
   new Person("Jane")
 row
  Feature Conditionals
  FeatureLink ../features/hasConditionals.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   if (true)
    console.log("hi!")
 row
  Feature Method Chaining
  FeatureLink ../features/hasMethodChaining.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   "hello world".toString().substr(0, 1).length
 row
  Feature Magic Getters and Setters
  FeatureLink ../features/hasMagicGettersAndSetters.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // Can be implemented in ES6 using proxies:
   "use strict";
   if (typeof Proxy == "undefined") {
       throw new Error("This browser doesn't support Proxy");
   }
   let original = {
       "foo": "bar"
   };
   let proxy = new Proxy(original, {
       get(target, name, receiver) {
           let rv = Reflect.get(target, name, receiver);
           if (typeof rv === "string") {
               rv = rv.toUpperCase();
           }
           return rv;
         }
   });
   console.log(`original.foo = ${original.foo}`); // "original.foo = bar"
   console.log(`proxy.foo = ${proxy.foo}`);       // "proxy.foo = BAR"
 row
  Feature Dynamic Properties
  FeatureLink ../features/hasDynamicProperties.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   class Person {}
   const person = new Person()
   person.age = 50
 row
  Feature Source Maps
  FeatureLink ../features/hasSourceMaps.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   {
    version: 3,
    file: 'min.js',
    names: ['bar', 'baz', 'n'],
    sources: ['one.js', 'two.js'],
    sourceRoot: 'http://example.com/www/js/',
    mappings: 'CAAC,IAAI,IAAM,SAAUA,GAClB,OAAOC,IAAID;CCDb,IAAI,IAAM,SAAUE,GAClB,OAAOA'
   };
 row
  Feature Bitwise Operators
  FeatureLink ../features/hasBitWiseOperators.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   var x = 5 & 1;
 row
  Feature Single Dispatch
  FeatureLink ../features/hasSingleDispatch.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Polymorphism
  FeatureLink ../features/hasPolymorphism.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   "a" + "b"; 1 + 2
 row
  Feature Merges Whitespace
  FeatureLink ../features/mergesWhitespace.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Lists
  FeatureLink ../features/hasLists.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   const list = [1,2,3]
 row
  Feature Integers
  FeatureLink ../features/hasIntegers.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   80766866
 row
  Feature Breakpoints
  FeatureLink ../features/supportsBreakpoints.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   if (false)
     debugger
 row
  Feature Partial Application
  FeatureLink ../features/hasPartialApplication.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   const addNumbers = (num1, num2) => num1 + num2
   const add5 = num => addNumbers(10, num)
 row
  Feature Map Functions
  FeatureLink ../features/hasMapFunctions.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   [1,2.1].map(Math.round)
 row
  Feature Binary Operators
  FeatureLink ../features/hasBinaryOperators.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   1 + 1
 row
  Feature Async Await
  FeatureLink ../features/hasAsyncAwait.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   async doSomething => await somethingElse()
 row
  Feature Expressions
  FeatureLink ../features/hasExpressions.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   1 + 1
 row
  Feature Regular Expression Syntax Sugar
  FeatureLink ../features/hasRegularExpressionsSyntaxSugar.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   console.log("Hello World".match(/\w/))
 row
  Feature Statements
  FeatureLink ../features/hasStatements.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   let x = 3;
 row
  Feature Case Insensitive Identifiers
  FeatureLink ../features/hasCaseInsensitiveIdentifiers.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Operator Overloading
  FeatureLink ../features/hasOperatorOverloading.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Multiple Inheritance
  FeatureLink ../features/hasMultipleInheritance.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Function Overloading
  FeatureLink ../features/hasFunctionOverloading.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Macros
  FeatureLink ../features/hasMacros.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Processor Registers
  FeatureLink ../features/hasProcessorRegisters.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Multiple Dispatch
  FeatureLink ../features/hasMultipleDispatch.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Pointers
  FeatureLink ../features/hasPointers.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Variable Substitution Syntax
  FeatureLink ../features/hasVariableSubstitutionSyntax.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

keyboardNav ssl.html surge.html

import ../footer.scroll
