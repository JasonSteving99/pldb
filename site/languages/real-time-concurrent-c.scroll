import header.scroll

title Real-Time Concurrent C

title Real-Time Concurrent C - Programming language
 hidden

html
 <a class="prevLang" href="rdml.html">&lt;</a>
 <a class="nextLang" href="real-time-mentat.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/real-time-concurrent-c.pldb

startColumns 4

html <div class="quickLinks"></div>

* Real-Time Concurrent C is a <a href="../lists/languages.html?filter=pl">programming language</a> created in 1991.
 link ../lists/languages.html?filter=1991 1991

kpiTable
 #3057 <span title="TotalRank: 3812 Jobs: 103 Users: 2797 Facts: 2737 Links: 972">on PLDB</span>
 32 Years Old
 0 <span title="Books about or leveraging Real-Time Concurrent C">Books</span>
 0 <span title="Academic publications about or leveraging Real-Time Concurrent C">Papers</span>

* 

- Real-Time Concurrent C is a superset of <a href="cpp.html">C++</a>
- Real-Time Concurrent C first developed in <a href="../lists/originCommunities.html#atT">AT&T</a>
- Real-Time Concurrent C on HOPL
 https://hopl.info/showlanguage.prx?exp=7878
- Read more about Real-Time Concurrent C on Semantic Scholar: 1.
 https://semanticscholar.org/paper/a99af939a0ed0b105862d6a569ad6f8864e0a4be 1.
- Read more about Real-Time Concurrent C on the web: 1.
 https://www-ccs.cs.umass.edu/spring/internal/rts_library/node35.html 1.
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://pldb.com/edit/real-time-concurrent-c">Improve our Real-Time Concurrent C file</a>

html <br>

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Access Modifiers
  FeatureLink ../features/hasAccessModifiers.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Exceptions
  FeatureLink ../features/hasExceptions.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Classes
  FeatureLink ../features/hasClasses.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Threads
  FeatureLink ../features/hasThreads.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Virtual function
  FeatureLink ../features/hasVirtualFunctions.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   class Animal {
    public:
     // Intentionally not virtual:
     void Move(void) {
       std::cout << "This animal moves in some way" << std::endl;
     }
     virtual void Eat(void) = 0;
   };
   
   // The class "Animal" may possess a definition for Eat if desired.
   class Llama : public Animal {
    public:
     // The non virtual function Move is inherited but not overridden.
     void Eat(void) override {
       std::cout << "Llamas eat grass!" << std::endl;
     }
   };
 row
  Feature Templates
  FeatureLink ../features/hasTemplates.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   template <int length>
   Vector<length>& Vector<length>::operator+=(const Vector<length>& rhs)
   {
       for (int i = 0; i < length; ++i)
           value[i] += rhs.value[i];
       return *this;
   }
 row
  Feature Operator Overloading
  FeatureLink ../features/hasOperatorOverloading.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Multiple Inheritance
  FeatureLink ../features/hasMultipleInheritance.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Namespaces
  FeatureLink ../features/hasNamespaces.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   #include <iostream>
   using namespace std;
   
   // Variable created inside namespace
   namespace first
   {
     int val = 500;
   }
    
   // Global variable
   int val = 100;
   // Ways to do it: https://en.cppreference.com/w/cpp/language/namespace
   namespace ns_name { declarations }
   inline namespace ns_name { declarations }
   namespace { declarations }
   ns_name::name
   using namespace ns_name;
   using ns_name::name;
   namespace name = qualified-namespace ;
   namespace ns_name::inline(since C++20)(optional) name { declarations } 
 row
  Feature Function Overloading
  FeatureLink ../features/hasFunctionOverloading.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // volume of a cube
   int volume(const int s) {
    return s*s*s;
   }
   // volume of a cylinder
   double volume(const double r, const int h) {
     return 3.1415926*r*r*static_cast<double>(h);
   }
 row
  Feature Iterators
  FeatureLink ../features/hasIterators.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   std::vector<int> items;
   items.push_back(5);  // Append integer value '5' to vector 'items'.
   items.push_back(2);  // Append integer value '2' to vector 'items'.
   items.push_back(9);  // Append integer value '9' to vector 'items'.
   
   for (auto it = items.begin(); it != items.end(); ++it) {  // Iterate through 'items'.
     std::cout << *it;  // And print value of 'items' for current index.
   }
 row
  Feature Constructors
  FeatureLink ../features/hasConstructors.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   class Foobar {
    public:
     Foobar(double r = 1.0,
            double alpha = 0.0)  // Constructor, parameters with default values.
         : x_(r * cos(alpha))    // <- Initializer list
     {
       y_ = r * sin(alpha);  // <- Normal assignment
     }
   
    private:
     double x_;
     double y_;
   };
   Foobar a,
          b(3),
          c(5, M_PI/4);
 row
  Feature Single Dispatch
  FeatureLink ../features/hasSingleDispatch.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Partial Application
  FeatureLink ../features/hasPartialApplication.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // http://www.cplusplus.com/reference/functional/bind/
   // bind example
   #include <iostream>     // std::cout
   #include <functional>   // std::bind
   
   // a function: (also works with function object: std::divides<double> my_divide;)
   double my_divide (double x, double y) {return x/y;}
   
   struct MyPair {
     double a,b;
     double multiply() {return a*b;}
   };
   
   int main () {
     using namespace std::placeholders;    // adds visibility of _1, _2, _3,...
   
     // binding functions:
     auto fn_five = std::bind (my_divide,10,2);               // returns 10/2
     std::cout << fn_five() << '\n';                          // 5
   
     auto fn_half = std::bind (my_divide,_1,2);               // returns x/2
     std::cout << fn_half(10) << '\n';                        // 5
   
     auto fn_invert = std::bind (my_divide,_2,_1);            // returns y/x
     std::cout << fn_invert(10,2) << '\n';                    // 0.2
   
     auto fn_rounding = std::bind<int> (my_divide,_1,_2);     // returns int(x/y)
     std::cout << fn_rounding(10,3) << '\n';                  // 3
   
     MyPair ten_two {10,2};
   
     // binding members:
     auto bound_member_fn = std::bind (&MyPair::multiply,_1); // returns x.multiply()
     std::cout << bound_member_fn(ten_two) << '\n';           // 20
   
     auto bound_member_data = std::bind (&MyPair::a,ten_two); // returns ten_two.a
     std::cout << bound_member_data() << '\n';                // 10
   
     return 0;
   }
 row
  Feature Scientific Notation
  FeatureLink ../features/hasScientificNotation.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Conditionals
  FeatureLink ../features/hasConditionals.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Constants
  FeatureLink ../features/hasConstants.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature While Loops
  FeatureLink ../features/hasWhileLoops.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Case Sensitivity
  FeatureLink ../features/isCaseSensitive.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Assignment
  FeatureLink ../features/hasAssignment.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Switch Statements
  FeatureLink ../features/hasSwitch.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   switch(expression) {
      case true  :
         break;
      default :
      //
      break;
   }
 row
  Feature Print() Debugging
  FeatureLink ../features/hasPrintDebugging.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature MultiLine Comments
  FeatureLink ../features/hasMultiLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   /* A comment
   */
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // A comment
 row
  Feature Increment and decrement operators
  FeatureLink ../features/hasIncrementAndDecrementOperators.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Zero-based numbering
  FeatureLink ../features/hasZeroBasedNumbering.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Variadic Functions
  FeatureLink ../features/hasVariadicFunctions.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   double average(int count, ...)
   {
    //
   }
 row
  Feature Manual Memory Management
  FeatureLink ../features/hasManualMemoryManagement.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   #include <stdio.h>
   #include <stdlib.h>
   int main(void)
   {
     int *poin = malloc(4);
     free(poin);
   }
 row
  Feature Macros
  FeatureLink ../features/hasMacros.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // https://learn.microsoft.com/en-us/cpp/preprocessor/macros-c-cpp?redirectedfrom=MSDN&view=msvc-170
   // https://gcc.gnu.org/onlinedocs/cpp/Macro-Arguments.html
   #define min(X, Y)  ((X) < (Y) ? (X) : (Y))
     x = min(a, b);          →  x = ((a) < (b) ? (a) : (b));
     y = min(1, 2);          →  y = ((1) < (2) ? (1) : (2));
     z = min(a + 28, *p);    →  z = ((a + 28) < (*p) ? (a + 28) : (*p));
 row
  Feature Integers
  FeatureLink ../features/hasIntegers.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   int pldb = 80766866;
 row
  Feature File Imports
  FeatureLink ../features/hasImports.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   //  If a header file is included within <>, the preprocessor will search a predetermined directory path to locate the header file. If the header file is enclosed in "", the preprocessor will look for the header file in the same directory as the source file.
   #include <stdio.h>
   #include "stdio.h"
 row
  Feature Type Casting
  FeatureLink ../features/hasExplicitTypeCasting.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   double da = 3.3;
   double db = 3.3;
   double dc = 3.4;
   int result = (int)da + (int)db + (int)dc; //result == 9
 row
  Feature Directives
  FeatureLink ../features/hasDirectives.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   #include <stdio.h>
   #define height 10
   #ifdef
   #endif
   #if
   #else
   #ifndef
   #undef
   #pragma
 row
  Feature Gotos
  FeatureLink ../features/hasGotos.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // C/C++ program to check if a number is 
   // even or not using goto statement 
   #include <iostream> 
   using namespace std; 
     
   // function to check even or not 
   void checkEvenOrNot(int num) 
   { 
       if (num % 2 == 0) 
           goto even; // jump to even 
       else
           goto odd; // jump to odd 
     
   even: 
       cout << num << " is evenn"; 
       return; // return if even 
   odd: 
       cout << num << " is oddn"; 
   } 
     
   // Driver program to test above function 
   int main() 
   { 
       int num = 26; 
       checkEvenOrNot(num); 
       return 0; 
   }
 row
  Feature Structs
  FeatureLink ../features/hasStructs.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   struct account {
     int account_number;
     char *first_name;
     char *last_name;
     float balance;
   };
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   /* hello world */
   // hi
 row
  Feature Symbol Tables
  FeatureLink ../features/hasSymbolTables.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // Declare an external function
   extern double bar(double x);
   
   // Define a public function
   double foo(int count)
   {
       double  sum = 0.0;
   
       // Sum all the values bar(1) to bar(count)
       for (int i = 1;  i <= count;  i++)
           sum += bar((double) i);
       return sum;
   }
   // Symbol Table:
   // Symbol name|Type|Scope
   // bar|function, double|extern
   // x|double|function parameter
   // foo|function, double|global
   // count|int|function parameter
   // sum|double|block local
   // i|int|for-loop statement
 row
  Feature Bitwise Operators
  FeatureLink ../features/hasBitWiseOperators.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   int i = 4; /* bit pattern equivalent is binary 100 */
   int j = i << 2; /* makes it binary 10000, which multiplies the original number by 4 i.e. 16 */
 row
  Feature Assert Statements
  FeatureLink ../features/hasAssertStatements.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   #include <assert.h>
   int i, a[10];
   for (i = 0; i < 10; ++i)
     {
     assert(0 <= i && i < 10);
     a[i] = 10-i;
     }
   for (i = 0; i < 10; ++i)
     {
     assert(0 <= i && i < 10);
     assert(0 <= a[i] && a[i] < 10);
     a[a[i]] = a[i];
     }
 row
  Feature Strings
  FeatureLink ../features/hasStrings.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   "hello world"
 row
  Feature Pointers
  FeatureLink ../features/hasPointers.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   int *ptr;
 row
  Feature Ternary operators
  FeatureLink ../features/hasTernaryOperators.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   #include <stdio.h>
   int main(void) { printf("%d", 1 ? 1 : 0); }
 row
  Feature Characters
  FeatureLink ../features/hasCharacters.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   char character = 'P';
 row
  Feature Booleans
  FeatureLink ../features/hasBooleans.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Enums
  FeatureLink ../features/hasEnums.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   enum Gender {
     Male,
     Female,
   };
 row
  Feature Magic Getters and Setters
  FeatureLink ../features/hasMagicGettersAndSetters.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Fixed Point Numbers
  FeatureLink ../features/hasFixedPoint.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Case Insensitive Identifiers
  FeatureLink ../features/hasCaseInsensitiveIdentifiers.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Garbage Collection
  FeatureLink ../features/hasGarbageCollection.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Regular Expression Syntax Sugar
  FeatureLink ../features/hasRegularExpressionsSyntaxSugar.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Variable Substitution Syntax
  FeatureLink ../features/hasVariableSubstitutionSyntax.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

keyboardNav rdml.html real-time-mentat.html

import ../footer.scroll
