import header.scroll

title PicoLisp

title PicoLisp - Programming language
 hidden

html
 <a class="prevLang" href="sed.html">&lt;</a>
 <a class="nextLang" href="flex.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/picolisp.pldb

startColumns 4

html <div class="quickLinks"><a href="https://picolisp.com/"><svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M12.7166 3.79541C12.2835 3.49716 11.7165 3.49716 11.2834 3.79541L4.14336 8.7121C3.81027 8.94146 3.60747 9.31108 3.59247 9.70797C3.54064 11.0799 3.4857 13.4824 3.63658 15.1877C3.7504 16.4742 4.05336 18.1747 4.29944 19.4256C4.41371 20.0066 4.91937 20.4284 5.52037 20.4284H8.84433C8.98594 20.4284 9.10074 20.3111 9.10074 20.1665V15.9754C9.10074 14.9627 9.90433 14.1417 10.8956 14.1417H13.4091C14.4004 14.1417 15.204 14.9627 15.204 15.9754V20.1665C15.204 20.3111 15.3188 20.4284 15.4604 20.4284H18.4796C19.0806 20.4284 19.5863 20.0066 19.7006 19.4256C19.9466 18.1747 20.2496 16.4742 20.3634 15.1877C20.5143 13.4824 20.4594 11.0799 20.4075 9.70797C20.3925 9.31108 20.1897 8.94146 19.8566 8.7121L12.7166 3.79541ZM10.4235 2.49217C11.3764 1.83602 12.6236 1.83602 13.5765 2.49217L20.7165 7.40886C21.4457 7.91098 21.9104 8.73651 21.9448 9.64736C21.9966 11.0178 22.0564 13.5119 21.8956 15.3292C21.7738 16.7067 21.4561 18.4786 21.2089 19.7353C20.9461 21.0711 19.7924 22.0001 18.4796 22.0001H15.4604C14.4691 22.0001 13.6655 21.1791 13.6655 20.1665V15.9754C13.6655 15.8307 13.5507 15.7134 13.4091 15.7134H10.8956C10.754 15.7134 10.6392 15.8307 10.6392 15.9754V20.1665C10.6392 21.1791 9.83561 22.0001 8.84433 22.0001H5.52037C4.20761 22.0001 3.05389 21.0711 2.79113 19.7353C2.54392 18.4786 2.22624 16.7067 2.10437 15.3292C1.94358 13.5119 2.00338 11.0178 2.05515 9.64736C2.08957 8.73652 2.55427 7.91098 3.28346 7.40886L10.4235 2.49217Z"/></svg></a> <a href="https://en.wikipedia.org/wiki/PicoLisp"><svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="98.05px" height="98.05px" viewBox="0 0 98.05 98.05" style="enable-background:new 0 0 98.05 98.05;" xml:space="preserve"><path d="M98.023,17.465l-19.584-0.056c-0.004,0.711-0.006,1.563-0.017,2.121c1.664,0.039,5.922,0.822,7.257,4.327L66.92,67.155 c-0.919-2.149-9.643-21.528-10.639-24.02l9.072-18.818c1.873-2.863,5.455-4.709,8.918-4.843l-0.01-1.968L55.42,17.489 c-0.045,0.499,0.001,1.548-0.068,2.069c5.315,0.144,7.215,1.334,5.941,4.508c-2.102,4.776-6.51,13.824-7.372,15.475 c-2.696-5.635-4.41-9.972-7.345-16.064c-1.266-2.823,1.529-3.922,4.485-4.004v-1.981l-21.82-0.067 c0.016,0.93-0.021,1.451-0.021,2.131c3.041,0.046,6.988,0.371,8.562,3.019c2.087,4.063,9.044,20.194,11.149,24.514 c-2.685,5.153-9.207,17.341-11.544,21.913c-3.348-7.43-15.732-36.689-19.232-44.241c-1.304-3.218,3.732-5.077,6.646-5.213 l0.019-2.148L0,17.398c0.005,0.646,0.027,1.71,0.029,2.187c4.025-0.037,9.908,6.573,11.588,10.683 c7.244,16.811,14.719,33.524,21.928,50.349c0.002,0.029,2.256,0.059,2.281,0.008c4.717-9.653,10.229-19.797,15.206-29.56 L63.588,80.64c0.005,0.004,2.082,0.016,2.093,0.007c7.962-18.196,19.892-46.118,23.794-54.933c1.588-3.767,4.245-6.064,8.543-6.194 l0.032-1.956L98.023,17.465z"/></svg></a> <a href="https://picolisp.com/wiki/?Documentation"><svg viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg"><g transform="matrix(1, 0, 0, 1, 13.859316, 9.109739)"><g><g><path d="M340.732,0H55v485h375V94.518L340.732,0z M345,26.364L405.1,90H345V26.364z M415,470H70V15h260v90h85V470z"/><rect x="102.5" y="191" width="280" height="15"/><rect x="102.5" y="141" width="120" height="15"/><rect x="102.5" y="241" width="280" height="15"/><rect x="102.5" y="291" width="280" height="15"/><rect x="102.5" y="341" width="280" height="15"/><rect x="102.5" y="391" width="280" height="15"/></g></g></g></svg></a></div>

* PicoLisp is a <a href="../lists/languages.html?filter=pl">programming language</a> created in 1988 by Alexander Burger.
 link ../lists/languages.html?filter=1988 1988
 link ../lists/creators.html#alexanderBurger Alexander Burger

kpiTable
 #142 <span title="TotalRank: 410 Jobs: 103 Users: 938 Facts: 71 Links: 236">on PLDB</span>
 35 Years Old
 316 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging PicoLisp">Books</span>
 0 <span title="Academic publications about or leveraging PicoLisp">Papers</span>
 114 <span title="PicoLisp repos on GitHub.">Repos</span>

* Try now: <a href="https://tio.run/#picolisp">TIO</a>

* PicoLisp is an open source Lisp dialect. It runs on Linux and other POSIX-compliant systems.. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/PicoLisp Read more on Wikipedia...

- PicoLisp website
 https://picolisp.com/
- PicoLisp Wikipedia page
 https://en.wikipedia.org/wiki/PicoLisp
- PicoLisp docs
 https://picolisp.com/wiki/?Documentation
- There are at least 114 PicoLisp repos on <a href="https://github.com/search?q=language:PicoLisp">GitHub</a>
- PicoLisp first developed in <a href="../lists/originCommunities.html#httpsWwwMailArchiveComPicolispSoftwareLabDe">https://www.mail-archive.com/picolisp@software-lab.de</a>
- file extensions for PicoLisp include l
- The  Google BigQuery Public Dataset GitHub snapshot shows 85 users using PicoLisp in 99 repos on <a href="https://api.github.com/search/repositories?q=language:PicoLisp">GitHub</a>
- Explore PicoLisp snippets on <a href="http://www.rosettacode.org/wiki/Category:PicoLisp">Rosetta Code</a>
- GitHub supports <a href="https://github.com/textmate/lisp.tmbundle" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for PicoLisp
- Official Blog page for PicoLisp
 http://pico-lisp.blogspot.com/
- <a href="https://picolisp.com/">picolisp.com</a> was registered in 2007
- See also: (9 related languages)<a href="lisp.html">Lisp</a>, <a href="linux.html">Linux</a>, <a href="s-expressions.html">S-expressions</a>, <a href="common-lisp.html">Common Lisp</a>, <a href="emacs-lisp.html">Emacs Lisp</a>, <a href="prolog.html">Prolog</a>, <a href="c.html">C</a>, <a href="assembly-language.html">Assembly language</a>, <a href="java.html">Java</a>
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://pldb.com/edit/picolisp">Improve our PicoLisp file</a>

html <br>

codeWithHeader Example from <a href='https://github.com/textmate/lisp.tmbundle'>Linguist</a>:
 # 11dec13abu
 # (c) Software Lab. Alexander Burger
 
 (de permute (Lst)
    (ifn (cdr Lst)
       (cons Lst)
       (mapcan
          &#39;((X)
             (mapcar
                &#39;((Y) (cons X Y))
                (permute (delete X Lst)) ) )
          Lst ) ) )
 
 (de subsets (N Lst)
    (cond
       ((=0 N) &#39;(NIL))
       ((not Lst))
       (T
          (conc
             (mapcar
                &#39;((X) (cons (car Lst) X))
                (subsets (dec N) (cdr Lst)) )
             (subsets N (cdr Lst)) ) ) ) )
 
 (de shuffle (Lst)
    (by &#39;(NIL (rand)) sort Lst) )
 
 (de samples (Cnt Lst)
    (make
       (until (=0 Cnt)
          (when (&gt;= Cnt (rand 1 (length Lst)))
             (link (car Lst))
             (dec &#39;Cnt) )
          (pop &#39;Lst) ) ) )
 
 
 # Genetic Algorithm
 (de gen (&quot;Pop&quot; &quot;Cond&quot; &quot;Re&quot; &quot;Mu&quot; &quot;Se&quot;)
    (until (&quot;Cond&quot; &quot;Pop&quot;)
       (for (&quot;P&quot; &quot;Pop&quot; &quot;P&quot; (cdr &quot;P&quot;))
          (set &quot;P&quot;
             (maxi &quot;Se&quot;  # Selection
                (make
                   (for (&quot;P&quot; &quot;Pop&quot; &quot;P&quot;)
                      (rot &quot;P&quot; (rand 1 (length &quot;P&quot;)))
                      (link  # Recombination + Mutation
                         (&quot;Mu&quot; (&quot;Re&quot; (pop &#39;&quot;P&quot;) (pop &#39;&quot;P&quot;))) ) ) ) ) ) ) )
    (maxi &quot;Se&quot; &quot;Pop&quot;) )
 
 
 # Alpha-Beta tree search
 (de game (&quot;Flg&quot; &quot;Cnt&quot; &quot;Moves&quot; &quot;Move&quot; &quot;Cost&quot;)
    (let (&quot;Alpha&quot; &#39;(1000000)  &quot;Beta&quot; -1000000)
       (recur (&quot;Flg&quot; &quot;Cnt&quot; &quot;Alpha&quot; &quot;Beta&quot;)
          (let? &quot;Lst&quot; (&quot;Moves&quot; &quot;Flg&quot;)
             (if (=0 (dec &#39;&quot;Cnt&quot;))
                (loop
                   (&quot;Move&quot; (caar &quot;Lst&quot;))
                   (setq &quot;*Val&quot; (list (&quot;Cost&quot; &quot;Flg&quot;) (car &quot;Lst&quot;)))
                   (&quot;Move&quot; (cdar &quot;Lst&quot;))
                   (T (&gt;= &quot;Beta&quot; (car &quot;*Val&quot;))
                      (cons &quot;Beta&quot; (car &quot;Lst&quot;) (cdr &quot;Alpha&quot;)) )
                   (when (&gt; (car &quot;Alpha&quot;) (car &quot;*Val&quot;))
                      (setq &quot;Alpha&quot; &quot;*Val&quot;) )
                   (NIL (setq &quot;Lst&quot; (cdr &quot;Lst&quot;)) &quot;Alpha&quot;) )
                (setq &quot;Lst&quot;
                   (sort
                      (mapcar
                         &#39;((&quot;Mov&quot;)
                            (prog2
                               (&quot;Move&quot; (car &quot;Mov&quot;))
                               (cons (&quot;Cost&quot; &quot;Flg&quot;) &quot;Mov&quot;)
                               (&quot;Move&quot; (cdr &quot;Mov&quot;)) ) )
                         &quot;Lst&quot; ) ) )
                (loop
                   (&quot;Move&quot; (cadar &quot;Lst&quot;))
                   (setq &quot;*Val&quot;
                      (if (recurse (not &quot;Flg&quot;) &quot;Cnt&quot; (cons (- &quot;Beta&quot;)) (- (car &quot;Alpha&quot;)))
                         (cons (- (car @)) (cdar &quot;Lst&quot;) (cdr @))
                         (list (caar &quot;Lst&quot;) (cdar &quot;Lst&quot;)) ) )
                   (&quot;Move&quot; (cddar &quot;Lst&quot;))
                   (T (&gt;= &quot;Beta&quot; (car &quot;*Val&quot;))
                      (cons &quot;Beta&quot; (cdar &quot;Lst&quot;) (cdr &quot;Alpha&quot;)) )
                   (when (&gt; (car &quot;Alpha&quot;) (car &quot;*Val&quot;))
                      (setq &quot;Alpha&quot; &quot;*Val&quot;) )
                   (NIL (setq &quot;Lst&quot; (cdr &quot;Lst&quot;)) &quot;Alpha&quot;) ) ) ) ) ) )
 
 
 ### Grids ###
 (de grid (DX DY FX FY)
    (let Grid
       (make
          (for X DX
             (link
                (make
                   (for Y DY
                      (set
                         (link
                            (if (&gt; DX 26)
                               (box)
                               (intern (pack (char (+ X 96)) Y)) ) )
                         (cons (cons) (cons)) ) ) ) ) ) )
       (let West (and FX (last Grid))
          (for (Lst Grid  Lst)
             (let
                (Col (pop &#39;Lst)
                   East (or (car Lst) (and FX (car Grid)))
                   South (and FY (last Col)) )
                (for (L Col  L)
                   (with (pop &#39;L)
                      (set (: 0 1) (pop &#39;West))  # west
                      (con (: 0 1) (pop &#39;East))  # east
                      (set (: 0 -1) South)       # south
                      (con (: 0 -1)              # north
                         (or (car L) (and FY (car Col))) )
                      (setq South This) ) )
                (setq West Col) ) ) )
       Grid ) )
 
 (de west (This)
    (: 0 1 1) )
 
 (de east (This)
    (: 0 1 -1) )
 
 (de south (This)
    (: 0 -1 1) )
 
 (de north (This)
    (: 0 -1 -1) )
 
 (de disp (&quot;Grid&quot; &quot;How&quot; &quot;Fun&quot; &quot;X&quot; &quot;Y&quot; &quot;DX&quot; &quot;DY&quot;)
    (setq &quot;Grid&quot;
       (if &quot;X&quot;
          (mapcar
             &#39;((L) (flip (head &quot;DY&quot; (nth L &quot;Y&quot;))))
             (head &quot;DX&quot; (nth &quot;Grid&quot; &quot;X&quot;)) )
          (mapcar reverse &quot;Grid&quot;) ) )
    (let (N (+ (length (cdar &quot;Grid&quot;)) (or &quot;Y&quot; 1))  Sp (length N))
       (&quot;border&quot; north)
       (while (caar &quot;Grid&quot;)
          (prin &quot; &quot; (align Sp N) &quot; &quot;
             (and &quot;How&quot; (if (and (nT &quot;How&quot;) (west (caar &quot;Grid&quot;))) &quot; &quot; &#39;|)) )
          (for L &quot;Grid&quot;
             (prin
                (&quot;Fun&quot; (car L))
                (and &quot;How&quot; (if (and (nT &quot;How&quot;) (east (car L))) &quot; &quot; &#39;|)) ) )
          (prinl)
          (&quot;border&quot; south)
          (map pop &quot;Grid&quot;)
          (dec &#39;N) )
       (unless (&gt; (default &quot;X&quot; 1) 26)
          (space (inc Sp))
          (for @ &quot;Grid&quot;
             (prin &quot; &quot; (and &quot;How&quot; &quot;  &quot;) (char (+ 96 &quot;X&quot;)))
             (T (&gt; (inc &#39;&quot;X&quot;) 26)) )
          (prinl) ) ) )
 
 (de &quot;border&quot; (Dir)
    (when &quot;How&quot;
       (space Sp)
       (prin &quot;  +&quot;)
       (for L &quot;Grid&quot;
          (prin (if (and (nT &quot;How&quot;) (Dir (car L))) &quot;   +&quot; &quot;---+&quot;)) )
       (prinl) ) )
 

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token #
  Example
   # A comment
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Lispy
  FeatureLink ../features/isLisp.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

keyboardNav sed.html flex.html

import ../footer.scroll
