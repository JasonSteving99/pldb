import header.scroll

title Lean

title Lean - Programming language
 hidden

html
 <a class="prevLang" href="toml.html">&lt;</a>
 <a class="nextLang" href="hy.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/lean.pldb

startColumns 4

html <div class="quickLinks"><a href="http://leanprover.github.io/"><svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M12.7166 3.79541C12.2835 3.49716 11.7165 3.49716 11.2834 3.79541L4.14336 8.7121C3.81027 8.94146 3.60747 9.31108 3.59247 9.70797C3.54064 11.0799 3.4857 13.4824 3.63658 15.1877C3.7504 16.4742 4.05336 18.1747 4.29944 19.4256C4.41371 20.0066 4.91937 20.4284 5.52037 20.4284H8.84433C8.98594 20.4284 9.10074 20.3111 9.10074 20.1665V15.9754C9.10074 14.9627 9.90433 14.1417 10.8956 14.1417H13.4091C14.4004 14.1417 15.204 14.9627 15.204 15.9754V20.1665C15.204 20.3111 15.3188 20.4284 15.4604 20.4284H18.4796C19.0806 20.4284 19.5863 20.0066 19.7006 19.4256C19.9466 18.1747 20.2496 16.4742 20.3634 15.1877C20.5143 13.4824 20.4594 11.0799 20.4075 9.70797C20.3925 9.31108 20.1897 8.94146 19.8566 8.7121L12.7166 3.79541ZM10.4235 2.49217C11.3764 1.83602 12.6236 1.83602 13.5765 2.49217L20.7165 7.40886C21.4457 7.91098 21.9104 8.73651 21.9448 9.64736C21.9966 11.0178 22.0564 13.5119 21.8956 15.3292C21.7738 16.7067 21.4561 18.4786 21.2089 19.7353C20.9461 21.0711 19.7924 22.0001 18.4796 22.0001H15.4604C14.4691 22.0001 13.6655 21.1791 13.6655 20.1665V15.9754C13.6655 15.8307 13.5507 15.7134 13.4091 15.7134H10.8956C10.754 15.7134 10.6392 15.8307 10.6392 15.9754V20.1665C10.6392 21.1791 9.83561 22.0001 8.84433 22.0001H5.52037C4.20761 22.0001 3.05389 21.0711 2.79113 19.7353C2.54392 18.4786 2.22624 16.7067 2.10437 15.3292C1.94358 13.5119 2.00338 11.0178 2.05515 9.64736C2.08957 8.73652 2.55427 7.91098 3.28346 7.40886L10.4235 2.49217Z"/></svg></a> <a href="https://github.com/leanprover/lean"><svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"/></svg></a> <a href="https://leanprover.github.io/documentation/"><svg viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg"><g transform="matrix(1, 0, 0, 1, 13.859316, 9.109739)"><g><g><path d="M340.732,0H55v485h375V94.518L340.732,0z M345,26.364L405.1,90H345V26.364z M415,470H70V15h260v90h85V470z"/><rect x="102.5" y="191" width="280" height="15"/><rect x="102.5" y="141" width="120" height="15"/><rect x="102.5" y="241" width="280" height="15"/><rect x="102.5" y="291" width="280" height="15"/><rect x="102.5" y="341" width="280" height="15"/><rect x="102.5" y="391" width="280" height="15"/></g></g></g></svg></a></div>

* Lean is a <a href="../lists/languages.html?filter=pl">programming language</a> created in 2015 by Leonardo de Moura.
 link ../lists/languages.html?filter=2015 2015
 link ../lists/creators.html#leonardoDeMoura Leonardo de Moura

kpiTable
 #194 <span title="TotalRank: 527 Jobs: 103 Users: 290 Facts: 134 Links: 972">on PLDB</span>
 8 Years Old
 2.9k <span title="Crude user estimate from a linear model.">Users</span>
 4 <span title="Books about or leveraging Lean">Books</span>
 10 <span title="Academic publications about or leveraging Lean">Papers</span>
 2k <span title="Lean repos on GitHub.">Repos</span>

* Try now: <a href="https://tio.run/#lean">TIO</a>

* Lean Theorem Prover

- Lean website
 http://leanprover.github.io/
- Lean is developed on <a href="https://github.com/leanprover/lean">GitHub</a> and has 2,045 stars
- Lean docs
 https://leanprover.github.io/documentation/
- There are at least 1,807 Lean repos on <a href="https://github.com/search?q=language:Lean">GitHub</a>
- Lean first developed in <a href="../lists/originCommunities.html#microsoftResearch">Microsoft Research</a>
- file extensions for Lean include lean and hlean
- The  Google BigQuery Public Dataset GitHub snapshot shows 233 users using Lean in 265 repos on <a href="https://api.github.com/search/repositories?q=language:Lean">GitHub</a>
- <a href="pygments.html">Pygments</a> supports <a href="https://github.com/pygments/pygments/blob/master/pygments/lexers/theorem.py">syntax highlighting</a> for Lean
- GitHub supports <a href="https://github.com/leanprover/Lean.tmbundle" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for Lean
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://pldb.com/edit/lean">Improve our Lean file</a>

html <br>

codeWithHeader Example from <a href='https://github.com/leachim6/hello-world/blob/main/l/Lean'>hello-world</a>:
 #print &quot;Hello World&quot;

codeWithHeader Example from <a href='https://github.com/leanprover/Lean.tmbundle'>Linguist</a>:
 /-
 Copyright (c) 2014 Microsoft Corporation. All rights reserved.
 Released under Apache 2.0 license as described in the file LICENSE.
 
 Module: algebra.binary
 Authors: Leonardo de Moura, Jeremy Avigad
 
 General properties of binary operations.
 -/
 
 import logic.eq
 open eq.ops
 
 namespace binary
   section
     variable {A : Type}
     variables (op₁ : A → A → A) (inv : A → A) (one : A)
 
     local notation a * b := op₁ a b
     local notation a ⁻¹  := inv a
     local notation 1     := one
 
     definition commutative := ∀a b, a * b = b * a
     definition associative := ∀a b c, (a * b) * c = a * (b * c)
     definition left_identity := ∀a, 1 * a = a
     definition right_identity := ∀a, a * 1 = a
     definition left_inverse := ∀a, a⁻¹ * a = 1
     definition right_inverse := ∀a, a * a⁻¹ = 1
     definition left_cancelative := ∀a b c, a * b = a * c → b = c
     definition right_cancelative := ∀a b c, a * b = c * b → a = c
 
     definition inv_op_cancel_left := ∀a b, a⁻¹ * (a * b) = b
     definition op_inv_cancel_left := ∀a b, a * (a⁻¹ * b) = b
     definition inv_op_cancel_right := ∀a b, a * b⁻¹ * b =  a
     definition op_inv_cancel_right := ∀a b, a * b * b⁻¹ = a
 
     variable (op₂ : A → A → A)
 
     local notation a + b := op₂ a b
 
     definition left_distributive := ∀a b c, a * (b + c) = a * b + a * c
     definition right_distributive := ∀a b c, (a + b) * c = a * c + b * c
   end
 
   context
     variable {A : Type}
     variable {f : A → A → A}
     variable H_comm : commutative f
     variable H_assoc : associative f
     infixl `*` := f
     theorem left_comm : ∀a b c, a*(b*c) = b*(a*c) :=
     take a b c, calc
       a*(b*c) = (a*b)*c  : H_assoc
         ...   = (b*a)*c  : H_comm
         ...   = b*(a*c)  : H_assoc
 
     theorem right_comm : ∀a b c, (a*b)*c = (a*c)*b :=
     take a b c, calc
       (a*b)*c = a*(b*c) : H_assoc
         ...   = a*(c*b) : H_comm
         ...   = (a*c)*b : H_assoc
   end
 
   context
     variable {A : Type}
     variable {f : A → A → A}
     variable H_assoc : associative f
     infixl `*` := f
     theorem assoc4helper (a b c d) : (a*b)*(c*d) = a*((b*c)*d) :=
     calc
       (a*b)*(c*d) = a*(b*(c*d)) : H_assoc
               ... = a*((b*c)*d) : H_assoc
   end
 
 end binary
 

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Integers
  FeatureLink ../features/hasIntegers.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Strings
  FeatureLink ../features/hasStrings.html
  Supported <span class="hasFeature">✓</span>
  Token "
  Example
   "Hello world"
 row
  Feature Print() Debugging
  FeatureLink ../features/hasPrintDebugging.html
  Supported <span class="hasFeature">✓</span>
  Token #print
  Example

## Books about Lean from ISBNdb
pipeTable
 title|titleLink|authors|year|publisher
 Functional Programming Patterns in Scala and Clojure: Write Lean Programs for the JVM|https://isbndb.com/book/9781937785475|Bevilacqua-Linn, Michael|2013|Pragmatic Bookshelf
 Measuring and Improving Performance: Information Technology Applications in Lean Systems|https://isbndb.com/book/9781420084184|Martin, James William|2009|CRC Press
 Lean Python: Learn Just Enough Python to Build Useful Tools|https://isbndb.com/book/9781484223857|Gerrard, Paul|2016|Apress
 Lean Software Systems Engineering for Developers: Managing Requirements, Complexity, Teams, and Change Like a Champ|https://isbndb.com/book/9781484269336|Durham, Doug and Michel, Chad|2021|Apress

## Publications about Lean from Semantic Scholar
pipeTable
 title|titleLink|authors|year|citations|influentialCitations
 Exploring the role of human factors in lean management|https://www.semanticscholar.org/paper/12228cf77a74d25d79a94aa7959cd5649eb63ddf|P. Gaiardelli and Barbara Resta and Stefano Dotti|2019|32|2
 Development of a Lean Computational Thinking Abilities Assessment for Middle Grades Students|https://www.semanticscholar.org/paper/62b302055f9ca5ecf4469c56c607f12eee205d1a|E. Wiebe and Jennifer E. London and Osman Aksit and Bradford W. Mott and K. Boyer and James C. Lester|2019|31|4
 Lean management approach in hospitals: a systematic review|https://www.semanticscholar.org/paper/65f5eacd03a677f40f3c0e6c695962e4b273458b|Haleh Mousavi Isfahani and S. Tourani and H. Seyedin|2019|22|3
 Memory-Efficient Performance Monitoring on Programmable Switches with Lean Algorithms|https://www.semanticscholar.org/paper/d9ed95f065d770e595f302be8334b64a1b0f961f|Zaoxing Liu and Samson Zhou and Ori Rottenstreich and V. Braverman and J. Rexford|2019|20|0
 The Lean 4 Theorem Prover and Programming Language|https://www.semanticscholar.org/paper/c4c0d6ffd70081d143b32be53b06fec1259b3ad8|L. D. Moura and Sebastian Ullrich|2021|18|1
 lolliCop - A Linear Logic Implementation of a Lean Connection-Method Theorem Prover for First-Order Classical Logic|https://www.semanticscholar.org/paper/c12f7f4af28822d01b449213cad8ac85ba5c4ba6|J. S. Hodas and Naoyuki Tamura|2001|8|0
 A lean specification for GADTs: system F with first-class equality proofs|https://www.semanticscholar.org/paper/395df42520b2a07f04605515890a7eb0870fdd60|Arie Middelkoop and A. Dijkstra and S. Swierstra|2010|4|1
 Using Agile Games to Invigorate Agile and Lean Software Development Learning in Classrooms|https://www.semanticscholar.org/paper/b4e7e39b7a590d940e902e4c8c8a960df83a4f10|Rashina Hoda|2018|3|0
 Built-In Lean Management Tools in Simulation Modeling|https://www.semanticscholar.org/paper/03859bf77f8c4d21dfbb36cba377b3467f3a3100|P. Pawlewski|2019|3|0
 NLP Lean Programming Framework: Developing NLP Applications More Effectively|https://www.semanticscholar.org/paper/04c6990ea6520f1af4ddcacabc1042bd03681da5|Marc Schreiber and B. Kraft and Albert Zündorf|2018|1|0

keyboardNav toml.html hy.html

import ../footer.scroll
