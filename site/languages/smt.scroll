import header.scroll

title SMT

title SMT - Programming language
 hidden

html
 <a class="prevLang" href="flix.html">&lt;</a>
 <a class="nextLang" href="ezhil.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/smt.pldb

startColumns 4

html <div class="quickLinks"><a href="http://smtlib.cs.uiowa.edu/language.shtml"><svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M12.7166 3.79541C12.2835 3.49716 11.7165 3.49716 11.2834 3.79541L4.14336 8.7121C3.81027 8.94146 3.60747 9.31108 3.59247 9.70797C3.54064 11.0799 3.4857 13.4824 3.63658 15.1877C3.7504 16.4742 4.05336 18.1747 4.29944 19.4256C4.41371 20.0066 4.91937 20.4284 5.52037 20.4284H8.84433C8.98594 20.4284 9.10074 20.3111 9.10074 20.1665V15.9754C9.10074 14.9627 9.90433 14.1417 10.8956 14.1417H13.4091C14.4004 14.1417 15.204 14.9627 15.204 15.9754V20.1665C15.204 20.3111 15.3188 20.4284 15.4604 20.4284H18.4796C19.0806 20.4284 19.5863 20.0066 19.7006 19.4256C19.9466 18.1747 20.2496 16.4742 20.3634 15.1877C20.5143 13.4824 20.4594 11.0799 20.4075 9.70797C20.3925 9.31108 20.1897 8.94146 19.8566 8.7121L12.7166 3.79541ZM10.4235 2.49217C11.3764 1.83602 12.6236 1.83602 13.5765 2.49217L20.7165 7.40886C21.4457 7.91098 21.9104 8.73651 21.9448 9.64736C21.9966 11.0178 22.0564 13.5119 21.8956 15.3292C21.7738 16.7067 21.4561 18.4786 21.2089 19.7353C20.9461 21.0711 19.7924 22.0001 18.4796 22.0001H15.4604C14.4691 22.0001 13.6655 21.1791 13.6655 20.1665V15.9754C13.6655 15.8307 13.5507 15.7134 13.4091 15.7134H10.8956C10.754 15.7134 10.6392 15.8307 10.6392 15.9754V20.1665C10.6392 21.1791 9.83561 22.0001 8.84433 22.0001H5.52037C4.20761 22.0001 3.05389 21.0711 2.79113 19.7353C2.54392 18.4786 2.22624 16.7067 2.10437 15.3292C1.94358 13.5119 2.00338 11.0178 2.05515 9.64736C2.08957 8.73652 2.55427 7.91098 3.28346 7.40886L10.4235 2.49217Z"/></svg></a></div>

* SMT, aka Satisfiability Modulo Theories, is a <a href="../lists/languages.html?filter=pl">programming language</a> created in 2003.
 link ../lists/languages.html?filter=2003 2003

kpiTable
 #884 <span title="TotalRank: 1440 Jobs: 103 Users: 1117 Facts: 365 Links: 972">on PLDB</span>
 20 Years Old
 201 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging SMT">Books</span>
 7 <span title="Academic publications about or leveraging SMT">Papers</span>
 582 <span title="SMT repos on GitHub.">Repos</span>

* Common input and output languages for SMT solvers.

- SMT website
 http://smtlib.cs.uiowa.edu/language.shtml
- There are at least 582 SMT repos on <a href="https://github.com/search?q=language:SMT">GitHub</a>
- file extensions for SMT include smt2 and smt
- The  Google BigQuery Public Dataset GitHub snapshot shows 130 users using SMT in 149 repos on <a href="https://api.github.com/search/repositories?q=language:SMT">GitHub</a>
- GitHub supports <a href="https://github.com/SRI-CSL/SMT.tmbundle.git" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for SMT
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://pldb.com/edit/smt">Improve our SMT file</a>

html <br>

codeWithHeader Example from the web:
 ; Getting assertions
 (set-option :produce-assertions true)
 (set-logic QF_UF)
 (declare-const p Bool) (declare-const q Bool)
 (push 1)
  (assert (or p q))
  (push 1)
   (assert (not q))
   (get-assertions)
   ; ((or p q)
   ;  (not q)
   ; )
  (pop 1)
   (get-assertions)
  ; ((or p q))
  (pop 1)
  (get-assertions)
  ; ()
 (exit)

codeWithHeader Example from <a href='https://github.com/SRI-CSL/SMT.tmbundle.git'>Linguist</a>:
 (set-logic QF_LIA)
 (set-info :source | SMT-COMP&#39;06 organizers |)
 (set-info :smt-lib-version 2.0)
 (set-info :category &quot;check&quot;)
 (set-info :status unsat)
 (set-info :notes |This benchmark is designed to check if the DP supports bignumbers.|)
 (declare-fun x1 () Int)
 (declare-fun x2 () Int)
 (declare-fun x3 () Int)
 (declare-fun x4 () Int)
 (declare-fun x5 () Int)
 (declare-fun x6 () Int)
 (assert (and (or (&gt;= x1 1000) (&gt;= x1 1002)) 
              (or (&gt;= x2 (* 1230 x1)) (&gt;= x2 (* 1003 x1))) 
 			 (or (&gt;= x3 (* 1310 x2)) (&gt;= x3 (* 1999 x2)))
 			 (or (&gt;= x4 (* 4000 x3)) (&gt;= x4 (* 8000 x3))) 
 			 (or (&lt;= x5 (* (- 4000) x4)) (&lt;= x5 (* (- 8000) x4)))
 			 (or (&gt;= x6 (* (- 3) x5)) (&gt;= x6 (* (- 2) x5))) (&lt; x6 0)))
 (check-sat)
 (exit)

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   ; A comment
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token ;
  Example
   ; A comment
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

## Publications about SMT from Semantic Scholar
pipeTable
 title|titleLink|authors|year|citations|influentialCitations
 Scala to the Power of Z3: Integrating SMT and Programming|https://www.semanticscholar.org/paper/4a0eb42ded1878f39539aceca207f55dea2d8fbe|A. Köksal and Viktor Kuncak and Philippe Suter|2011|40|0
 SMT Solving for Functional Programming over Infinite Structures|https://www.semanticscholar.org/paper/cb714bd967b3c358fa09b7a53f22e2263733ab45|Bartek Klin and Michal Szynwelski|2016|19|2
 SMT in Verification, Modeling, and Testing at Microsoft|https://www.semanticscholar.org/paper/7e3016d5a49d83bed334c62de6a077e5f4d35ea9|N. Bjørner|2012|3|0
 Effective Encodings of Constraint Programming Models to SMT|https://www.semanticscholar.org/paper/b8eb4528ac0d6d7a32ebbf18bc4aa30c3cb1f1b1|E. Davidson and Ozgur Akgun and Joan Espasa and P. Nightingale|2020|3|0
 Inter-theory dependency analysis for SMT string solvers|https://www.semanticscholar.org/paper/2e4f01ec5c2aea7a759445024a25c8fc866dfacc|Minh-Thai Trinh and D. Chu and J. Jaffar|2020|2|1
 Using SMT Solver and Logic Puzzles for Teaching Computational Logics in Discrete Mathematics Class|https://www.semanticscholar.org/paper/23be6c89f123ecb7e590aa023618518241bba3e2|Shin Hong|2020|1|0
 Programming Behavioral Test Models for SMT Solving in Scala|https://www.semanticscholar.org/paper/d5130df1d0dffd54c5eba84255ef93804324de92|B. Aichernig and Benedikt Maderbacher and Stefan Tiran|2019|1|0

keyboardNav flix.html ezhil.html

import ../footer.scroll
