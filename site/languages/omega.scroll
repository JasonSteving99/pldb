import header.scroll

title omega

title omega - Programming language
 hidden

html
 <a class="prevLang" href="unity.html">&lt;</a>
 <a class="nextLang" href="freemarker.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/omega.pldb

startColumns 4

html <div class="quickLinks"><a href="http://web.cecs.pdx.edu/~sheard/Omega/index.html"><svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M12.7166 3.79541C12.2835 3.49716 11.7165 3.49716 11.2834 3.79541L4.14336 8.7121C3.81027 8.94146 3.60747 9.31108 3.59247 9.70797C3.54064 11.0799 3.4857 13.4824 3.63658 15.1877C3.7504 16.4742 4.05336 18.1747 4.29944 19.4256C4.41371 20.0066 4.91937 20.4284 5.52037 20.4284H8.84433C8.98594 20.4284 9.10074 20.3111 9.10074 20.1665V15.9754C9.10074 14.9627 9.90433 14.1417 10.8956 14.1417H13.4091C14.4004 14.1417 15.204 14.9627 15.204 15.9754V20.1665C15.204 20.3111 15.3188 20.4284 15.4604 20.4284H18.4796C19.0806 20.4284 19.5863 20.0066 19.7006 19.4256C19.9466 18.1747 20.2496 16.4742 20.3634 15.1877C20.5143 13.4824 20.4594 11.0799 20.4075 9.70797C20.3925 9.31108 20.1897 8.94146 19.8566 8.7121L12.7166 3.79541ZM10.4235 2.49217C11.3764 1.83602 12.6236 1.83602 13.5765 2.49217L20.7165 7.40886C21.4457 7.91098 21.9104 8.73651 21.9448 9.64736C21.9966 11.0178 22.0564 13.5119 21.8956 15.3292C21.7738 16.7067 21.4561 18.4786 21.2089 19.7353C20.9461 21.0711 19.7924 22.0001 18.4796 22.0001H15.4604C14.4691 22.0001 13.6655 21.1791 13.6655 20.1665V15.9754C13.6655 15.8307 13.5507 15.7134 13.4091 15.7134H10.8956C10.754 15.7134 10.6392 15.8307 10.6392 15.9754V20.1665C10.6392 21.1791 9.83561 22.0001 8.84433 22.0001H5.52037C4.20761 22.0001 3.05389 21.0711 2.79113 19.7353C2.54392 18.4786 2.22624 16.7067 2.10437 15.3292C1.94358 13.5119 2.00338 11.0178 2.05515 9.64736C2.08957 8.73652 2.55427 7.91098 3.28346 7.40886L10.4235 2.49217Z"/></svg></a></div>

* omega is a <a href="../lists/languages.html?filter=pl">programming language</a> created in 2005 by Tim Sheard.
 link ../lists/languages.html?filter=2005 2005
 link ../lists/creators.html#timSheard Tim Sheard

kpiTable
 #794 <span title="TotalRank: 1352 Jobs: 103 Users: 2404 Facts: 277 Links: 972">on PLDB</span>
 18 Years Old
 0 <span title="Books about or leveraging omega">Books</span>
 2 <span title="Academic publications about or leveraging omega">Papers</span>

* The Ωmega interpreter is styled after the Hugs Haskell Interpreter. The Ωmega syntax is based upon the syntax of Haskell. If you’re unsure of what syntax to use, a best first approximation is to use Haskell syntax. It works most of the time. While clearly descended from Haskell, Ωmega has several important syntactic and semantic differences.

- omega website
 http://web.cecs.pdx.edu/~sheard/Omega/index.html
- omega first developed in <a href="../lists/originCommunities.html#portlandStateUniversity">Portland State University</a>
- Read more about omega on the web: 1.
 https://code.google.com/archive/p/omega 1.
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://pldb.com/edit/omega">Improve our omega file</a>

html <br>

codeWithHeader Example from the web:
 --
 -- This code written by James Hook
 -- This file should work with Omega version 1.1
 -- released May 23, 2005
 -- See http://www.cs.pdx.edu/~sheard/Omega/index.html
 
 {-- These are predefined by the compiler
 kind Nat = Z | S Nat
 
 data Nat&#39; n
   = Z where n = Z
   | forall m . S (Nat&#39; m) where n = S m
 -}
 
 
 data LE a b
   = LeBase where a = b
   | ex c . LeStep (LE a c) where b = S c
 
 reflLE :: LE a a
 reflLE = LeBase
 
 transLE :: (LE a b) -&gt; (LE b c) -&gt; (LE a c)
 transLE p LeBase = p
 transLE p (LeStep q) = LeStep (transLE p q)
 
 compare :: Nat&#39; a -&gt; Nat&#39; b -&gt; ((LE a b)+(LE b a))
 compare Z Z = L LeBase
 compare Z (S x) =
   case compare Z x of L w -&gt; L (LeStep w)
 compare (S x) Z =
   case compare Z x of L w -&gt; R (LeStep w)
 compare (S x) (S y) = mapP g g (compare x y )
   where mapP f g (L x) = L(f x)
         mapP f g (R x) = R(g x)
         g :: LE x y -&gt; LE (S x) (S y)
         g LeBase = LeBase
         g (LeStep x) = LeStep (g x)
 
 data MonoList min max
   = MonoNil (LE min max)
   | forall n a . MonoCons (Nat&#39; n) (LE a n) (LE n max) (MonoList min a)
 
 appMonoList :: MonoList b c -&gt; MonoList a b -&gt; MonoList a c
 appMonoList (MonoNil bc) (MonoNil ab) =
       MonoNil (transLE ab bc)
 appMonoList (MonoNil bc) (MonoCons n an nb xs) =
       MonoCons n an (transLE nb bc) xs
 appMonoList (MonoCons m dm mc ys) xs =
       MonoCons m dm mc (appMonoList ys xs)
 
 singletonMonoList :: Nat&#39; n -&gt; MonoList n n
 singletonMonoList n = MonoCons n reflLE reflLE (MonoNil reflLE)
 
 data IntervalList min max
   = ILNil (LE min max)
   | forall x . ILCons (Nat&#39; x) (LE min x) (LE x max) (IntervalList min max)
 
 partition :: Nat&#39; n -&gt; LE a n -&gt; LE n b -&gt; IntervalList a b -&gt;
                      (IntervalList a n, IntervalList n b)
 partition x an nb xs = partitionAcc (ILNil an) (ILNil nb) xs
   where partitionAcc ls gs (ILNil ab) = (ls,gs)
         partitionAcc ls gs (ILCons y ay yb ys) =
             case compare y x of
               L yx -&gt; partitionAcc (ILCons y ay yx ls) gs ys
               R xy -&gt; partitionAcc ls (ILCons y xy yb gs) ys
 
 qsort :: IntervalList a b -&gt; MonoList a b
 qsort (ILNil ab) = MonoNil ab
 qsort (ILCons x ax xb (ILNil ab)) = MonoCons x ax xb (MonoNil reflLE)
 qsort (ILCons x ax xb xs) =
      let (less,greater) = partition x ax xb xs
          sortedLess = qsort less
    sortedGreater = qsort greater
      in appMonoList sortedGreater (appMonoList (singletonMonoList x) sortedLess)
 
 --

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature MultiLine Comments
  FeatureLink ../features/hasMultiLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token {- -}
  Example
   {- A comment
   -}
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   -- A comment
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token --
  Example
   -- A comment
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

## Publications about omega from Semantic Scholar
pipeTable
 title|titleLink|authors|year|citations|influentialCitations
 The Omega test: A fast and practical integer programming algorithm for dependence analysis|https://www.semanticscholar.org/paper/285024b15197b5face8bdef1d03f36949b8339c4|W. Pugh|1991|950|82
 Programming in Omega|https://www.semanticscholar.org/paper/69077e4f231a87a15ae3e0dff8c718d5e36f729d|T. Sheard and Nathan Mishra-Linger|2008|31|0

keyboardNav unity.html freemarker.html

import ../footer.scroll
