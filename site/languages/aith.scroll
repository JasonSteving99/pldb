import header.scroll

title Aith

title Aith - Programming language
 hidden

html
 <a class="prevLang" href="runoff.html">&lt;</a>
 <a class="nextLang" href="cfml.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/aith.pldb

startColumns 4

html <div class="quickLinks"><a href="https://github.com/Superstar64/aith"><svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M12.7166 3.79541C12.2835 3.49716 11.7165 3.49716 11.2834 3.79541L4.14336 8.7121C3.81027 8.94146 3.60747 9.31108 3.59247 9.70797C3.54064 11.0799 3.4857 13.4824 3.63658 15.1877C3.7504 16.4742 4.05336 18.1747 4.29944 19.4256C4.41371 20.0066 4.91937 20.4284 5.52037 20.4284H8.84433C8.98594 20.4284 9.10074 20.3111 9.10074 20.1665V15.9754C9.10074 14.9627 9.90433 14.1417 10.8956 14.1417H13.4091C14.4004 14.1417 15.204 14.9627 15.204 15.9754V20.1665C15.204 20.3111 15.3188 20.4284 15.4604 20.4284H18.4796C19.0806 20.4284 19.5863 20.0066 19.7006 19.4256C19.9466 18.1747 20.2496 16.4742 20.3634 15.1877C20.5143 13.4824 20.4594 11.0799 20.4075 9.70797C20.3925 9.31108 20.1897 8.94146 19.8566 8.7121L12.7166 3.79541ZM10.4235 2.49217C11.3764 1.83602 12.6236 1.83602 13.5765 2.49217L20.7165 7.40886C21.4457 7.91098 21.9104 8.73651 21.9448 9.64736C21.9966 11.0178 22.0564 13.5119 21.8956 15.3292C21.7738 16.7067 21.4561 18.4786 21.2089 19.7353C20.9461 21.0711 19.7924 22.0001 18.4796 22.0001H15.4604C14.4691 22.0001 13.6655 21.1791 13.6655 20.1665V15.9754C13.6655 15.8307 13.5507 15.7134 13.4091 15.7134H10.8956C10.754 15.7134 10.6392 15.8307 10.6392 15.9754V20.1665C10.6392 21.1791 9.83561 22.0001 8.84433 22.0001H5.52037C4.20761 22.0001 3.05389 21.0711 2.79113 19.7353C2.54392 18.4786 2.22624 16.7067 2.10437 15.3292C1.94358 13.5119 2.00338 11.0178 2.05515 9.64736C2.08957 8.73652 2.55427 7.91098 3.28346 7.40886L10.4235 2.49217Z"/></svg></a> <a href="https://github.com/Superstar64/aith"><svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"/></svg></a></div>

* Aith is a <a href="../lists/languages.html?filter=pl">programming language</a> created in 2020 by Superstar64.
 link ../lists/languages.html?filter=2020 2020
 link ../lists/creators.html#superstar64 Superstar64

kpiTable
 #539 <span title="TotalRank: 1098 Jobs: 103 Users: 1933 Facts: 23 Links: 972">on PLDB</span>
 3 Years Old
 43 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging Aith">Books</span>
 0 <span title="Academic publications about or leveraging Aith">Papers</span>

* Aith is a performant systems programming language with am empathises on type systems. As of now Aith is very early stages and very little is implemented.

- Aith website
 https://github.com/Superstar64/aith
- Aith is developed on <a href="https://github.com/Superstar64/aith">GitHub</a> and has 41 stars
- Aith first developed in <a href="../lists/originCommunities.html#httpsGithubComSuperstar64Aith">https://github.com/Superstar64/aith</a>
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://pldb.com/edit/aith">Improve our Aith file</a>

html <br>

codeWithHeader Example from the web:
 module ::
 
 inline runtimeCall = \f =&gt; \x =&gt; f (x);
 
 module combinators = {
     inline flip = \f =&gt; \x =&gt; \y =&gt; f !y !x;
     inline compose = \f =&gt; \g =&gt; \x =&gt; f !(g !x);
     
     inline readerPure = \x =&gt; \r =&gt; x;
     inline readerBind = \m =&gt; \f =&gt; \r =&gt; f !(m !r) !r;
     inline readerMap = \f =&gt; \m =&gt; readerBind !m !(compose !readerPure !f);
 };
 
 module systemf = {
     inline ignored &lt;B : type&gt; : &lt;A : type&gt; B -&gt; B;
     inline ignored &lt;B : type&gt; = &lt;A : type&gt; \(x : B) =&gt; x;
 
     inline idSysF = &lt;A : type&gt; \x : A =&gt; x;
 
     inline runIdSysF = \f {
         |&lt; f : &lt;A : type&gt; A -&gt; A &gt;|
     };
 
     inline id = runIdSysF !idSysF;
 
     type natural = &lt;A : type&gt; A -&gt; (A -&gt; A) -&gt; A;
 
     inline zero&lt;&gt; : natural;
     inline zero = &lt;A : type&gt; \z : A =&gt; \inc : A -&gt; A =&gt; z;
 
     inline inc&lt;&gt; : natural -&gt; natural;
     inline inc = \n =&gt; &lt;A : type&gt; \z : A =&gt; \inc : A -&gt; A =&gt; inc !(|&lt; n : natural &gt;| !z !inc);
 
     inline one&lt;&gt; : natural;
     inline one = inc !zero;
 
     inline two&lt;&gt; : natural;
     inline two = inc !one;
 };
 
 module varSub = {
     inline sub&lt;R : pretype&lt;pointer, unrestricted&gt;, A : region, B : region &gt;= A, C:type&gt;
     : R in A -&gt; R in B -&gt; C -[linear]&gt; C;
     inline sub = \a =&gt; \b =&gt; \x =&gt; x;
 
 
     inline cycle = \a =&gt; \b =&gt; \c {
         sub !a !b !(
             sub !b !c !(
                 sub !c !a !(
                     \x =&gt; x
                 )
             )
         )
     };
 };
 
 module default = {
     add = function(x,y) {
         x + y
     };
 
     ambiguous = function(x) {
         inline y = 1;
         x
     };
 };
 
 module unit = {
     idUnit = function () {
         ()
     };
 };
 
 module boolean = {
     inline yes = true;
 
     branch = function(b) {
         if b {
             1
         } else {
             2
         }
     };
 
     complex = function(b) {
         if (if (b) { true } else {false} ) {
             1
         } else {
             if yes {
                 2
             } else {
                 4
             }
         }
     };
 
     not = function(b) {
         !b
     };
 
     inBounds = function(x1, x2, x3) {
         x1 &lt;= x2 &amp; x2 &lt; x3
     };
 };
 
 module pair = {
     fst = function(x, y) =&gt; x;
 
     snd = function(x, y) =&gt; y;
     
     pattern = function (pair) {
         (fst(pair), snd(pair))
     };
 };
 
 module ptr = {
     derefTriple = function(x) {
         ***x
     };
 
     deref &lt;RA : region, RB : region &gt;= RA, T : pretype&lt;pointer, unrestricted&gt;&gt; : function (T* @ RA) =&gt; T uses RB;
     deref &lt;RA : region, RB : region &gt;= RA, T : pretype&lt;pointer, unrestricted&gt;&gt; = function (x) {
         *x
     };
 
     write&lt;A:region, B:region &gt;= A&gt; : function(int* @ A) =&gt; () uses B;
     write&lt;A:region, B:region &gt;= A&gt; = function(x :: int* @ A) {
         *x = (1 :: int)
     };
 
     writeTriple = function(x) {
         ***x = 1 
     };
 
     swap = function(x,y) {
         let xp = *x;
         *x = (*y);
         *y = xp;
         ()
     };
 };
 
 
 module number = {
     type point = (int, int, int);
 
     dotProduct &lt;R : region&gt; : function(point, point) =&gt; int uses R;
     dotProduct = function((x1,y1,z1), (x2, y2, z2)) {
         (x1 * x2 + y1 * y2 + z1 * z2)
     };
   
     mid &lt;R : region&gt; : function(uint, uint) =&gt; uint uses R;
     mid &lt;R : region&gt; = function(x,y) {
         (x + y) / 2
     };
 
     inline divGen = function(x,y) {
         (x + y - 1) / y
     };
 
     div = divGen;
 
     lessEqual = function(x,y) {
         x &lt;= y
     };
 
     factorial&lt;R : region&gt; : function(ulong) =&gt; ulong uses R; 
     factorial&lt;R : region&gt; = function(x) {
         if (x == 0) {
             1
         } else {
             x * factorial (x - 1)  
         }
     };
 };
 
 module fptr = {
     call = function(f) {
         f (1)
     };
 
     callUnit &lt;R : region&gt; : function(function*(uint) =&gt; () uses R) =&gt; () uses R;
     callUnit &lt;R : region&gt; = function(f) {
         f (2)
     };
 };
 
 module recurse = {
     explode&lt;L : multiplicity, R:region, A:pretype&lt;pointer, L&gt;&gt; : function() =&gt; A uses R;
     explode&lt;L : multiplicity, R:region, A:pretype&lt;pointer, L&gt;&gt; = function() {
         explode ()
     };
 };
 
 module world = {
     inline putchar&lt;A:region&gt; : function*(int) =&gt; int uses io in A;
     inline putchar&lt;A:region&gt; = extern &quot;putchar&quot;;
 
     putPtr&lt;A:region &gt;= io&gt; : function(int* @ A) =&gt; int uses A;
     putPtr = function(ptr) {
         putchar (*ptr)
     };
 };
 module arrays = {
     inline get = \x =&gt; \i {
         * &amp;* &amp;x[i]
     };
 
     inline set = \x =&gt; \i =&gt; \a {
         * &amp;* &amp;x[i] = a
     };
 
     swap = function(a, b, i) {
         let tmp = get !a !i;
         set !a !i !(get !b !i);
         set !b !i !tmp;
         ()
     };
 
     memcpyPtr = function(dst, src, i) {
         loop (let (dst, src, i) = (dst, src, i)) {
             if(i != 0) {
                 * &amp;* dst = (* &amp;* src);
                 continue (&amp;dst[1], &amp;src[1], i - 1)
             } else {
                 break ()
             }
         }
     };
 };
 
 module sort = {
 
     inline get = /arrays/get;
 
     inline set = /arrays/set;
 
     insert&lt;R : region&gt; : function(int[] @ R, unsigned integer(native)) =&gt; () uses R;
     insert&lt;R : region&gt; = function(array, index) {
         loop (let (array, index) = (array,index)) {
             if (index &gt; 0 &amp; get !array !index &lt; get !array !(index - 1) ) {
                 let tmp = get !array !index;
                 set !array !index !(get !array !(index - 1));
                 set !array !(index - 1) !tmp;
                 continue (array, index - 1)
             } else {
                 break ()
             }
         }
     };
 
     sort &lt;R : region&gt; : function(int[] @ R, unsigned integer(native)) =&gt; () uses R;
     sort &lt;R : region&gt; = function(array, length) {
         if (length &gt; 1) {
             sort(array, length - 1);
             insert(array, length - 1)
         } else {
             ()
         }
     };
 };
 
 module borrowed = {
     increment &lt;R : region&gt; : function(unique int*) =&gt; unique int* uses R;
     increment &lt;R : region&gt; = function(p :: unique int*) {
         let ((), p) = borrow p as &lt;A : region &gt;= R&gt;(x :: int* @ A) {
             *x = (*x + 1)
         };
         p
     };
 };
 
 module partial = {
     inline auto = \x =&gt; x;
     
     inline semi&lt;A : type&gt; = \x : A =&gt; x;
 
     inline scoped&lt;A : type&gt; : A -&gt; A;
     inline scoped = \x : A =&gt; x;
 
     inline manual&lt;A : type&gt; : A -&gt; A;
     inline manual&lt;A : type&gt; = \x =&gt; x;
 };
 
 module import = {
     inline id = \x =&gt; x;
     module b = {
         inline const = \y =&gt; /import/id;
     };
 };
 
 module levity = {
     idPolyPair&lt;A : pretype&lt;struct(pointer, 32bit word) ,linear&gt;&gt; = function(x :: A) {
         x
     };
 
     idPolyUnion&lt;A : pretype&lt;union(pointer, 32bit word) ,linear&gt;&gt; = function(x :: A) {
         x
     };
 
     useId = function(ptr) {
         idPolyPair(ptr, 0)
     };
 };
 
 module sum = {
     triangular = function(start, end) {
         loop (let (i, total) = (start, 0)) {
             if (i &lt;= end) {
                 continue (i + 1, total + i)
             } else {
                 break (total)
             }
         }
     };
 };
 
 module newtype = {
     wrapper num : pretype&lt;32bit word, unrestricted&gt;;
     wrapper num = int;
 
     makeNum = function() {
         wrap 1 :: num
     };
 
 
     wrapper linked : pretype&lt;pointer, unrestricted&gt;;
     wrapper linked = linked2* @ io;
 
     type linked2 = linked;
 
     read = function (x) {
         *unwrap (x :: linked)
     };
 };

## <a href="../lists/keywords.html?filter=aith">Keywords</a> in Aith
* as bool borrow boxed break byte capacity continue copy else existence extern false function if in inline int integer invariant io kind let linear long loop module multiarg multiplicity native opaque pointer pretype region representation short signed signedness size step struct subtypable transparent true type ubyte uint ulong union unique unrestricted unsigned unwrap used uses ushort word wrap wrapper

endColumns

keyboardNav runoff.html cfml.html

import ../footer.scroll
