import header.scroll

title GraphQL

title GraphQL - Query language
 hidden

html
 <a class="prevLang" href="common-lisp.html">&lt;</a>
 <a class="nextLang" href="vhdl.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/graphql.pldb

startColumns 4

html <div class="quickLinks"><a href="http://graphql.org/"><svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M12.7166 3.79541C12.2835 3.49716 11.7165 3.49716 11.2834 3.79541L4.14336 8.7121C3.81027 8.94146 3.60747 9.31108 3.59247 9.70797C3.54064 11.0799 3.4857 13.4824 3.63658 15.1877C3.7504 16.4742 4.05336 18.1747 4.29944 19.4256C4.41371 20.0066 4.91937 20.4284 5.52037 20.4284H8.84433C8.98594 20.4284 9.10074 20.3111 9.10074 20.1665V15.9754C9.10074 14.9627 9.90433 14.1417 10.8956 14.1417H13.4091C14.4004 14.1417 15.204 14.9627 15.204 15.9754V20.1665C15.204 20.3111 15.3188 20.4284 15.4604 20.4284H18.4796C19.0806 20.4284 19.5863 20.0066 19.7006 19.4256C19.9466 18.1747 20.2496 16.4742 20.3634 15.1877C20.5143 13.4824 20.4594 11.0799 20.4075 9.70797C20.3925 9.31108 20.1897 8.94146 19.8566 8.7121L12.7166 3.79541ZM10.4235 2.49217C11.3764 1.83602 12.6236 1.83602 13.5765 2.49217L20.7165 7.40886C21.4457 7.91098 21.9104 8.73651 21.9448 9.64736C21.9966 11.0178 22.0564 13.5119 21.8956 15.3292C21.7738 16.7067 21.4561 18.4786 21.2089 19.7353C20.9461 21.0711 19.7924 22.0001 18.4796 22.0001H15.4604C14.4691 22.0001 13.6655 21.1791 13.6655 20.1665V15.9754C13.6655 15.8307 13.5507 15.7134 13.4091 15.7134H10.8956C10.754 15.7134 10.6392 15.8307 10.6392 15.9754V20.1665C10.6392 21.1791 9.83561 22.0001 8.84433 22.0001H5.52037C4.20761 22.0001 3.05389 21.0711 2.79113 19.7353C2.54392 18.4786 2.22624 16.7067 2.10437 15.3292C1.94358 13.5119 2.00338 11.0178 2.05515 9.64736C2.08957 8.73652 2.55427 7.91098 3.28346 7.40886L10.4235 2.49217Z"/></svg></a> <a href="https://en.wikipedia.org/wiki/GraphQL"><svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="98.05px" height="98.05px" viewBox="0 0 98.05 98.05" style="enable-background:new 0 0 98.05 98.05;" xml:space="preserve"><path d="M98.023,17.465l-19.584-0.056c-0.004,0.711-0.006,1.563-0.017,2.121c1.664,0.039,5.922,0.822,7.257,4.327L66.92,67.155 c-0.919-2.149-9.643-21.528-10.639-24.02l9.072-18.818c1.873-2.863,5.455-4.709,8.918-4.843l-0.01-1.968L55.42,17.489 c-0.045,0.499,0.001,1.548-0.068,2.069c5.315,0.144,7.215,1.334,5.941,4.508c-2.102,4.776-6.51,13.824-7.372,15.475 c-2.696-5.635-4.41-9.972-7.345-16.064c-1.266-2.823,1.529-3.922,4.485-4.004v-1.981l-21.82-0.067 c0.016,0.93-0.021,1.451-0.021,2.131c3.041,0.046,6.988,0.371,8.562,3.019c2.087,4.063,9.044,20.194,11.149,24.514 c-2.685,5.153-9.207,17.341-11.544,21.913c-3.348-7.43-15.732-36.689-19.232-44.241c-1.304-3.218,3.732-5.077,6.646-5.213 l0.019-2.148L0,17.398c0.005,0.646,0.027,1.71,0.029,2.187c4.025-0.037,9.908,6.573,11.588,10.683 c7.244,16.811,14.719,33.524,21.928,50.349c0.002,0.029,2.256,0.059,2.281,0.008c4.717-9.653,10.229-19.797,15.206-29.56 L63.588,80.64c0.005,0.004,2.082,0.016,2.093,0.007c7.962-18.196,19.892-46.118,23.794-54.933c1.588-3.767,4.245-6.064,8.543-6.194 l0.032-1.956L98.023,17.465z"/></svg></a> <a href="https://reddit.com/r/GraphQL"><svg role="img" width="32px" height="32px" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg"><path d="M 18.65625 4 C 16.558594 4 15 5.707031 15 7.65625 L 15 11.03125 C 12.242188 11.175781 9.742188 11.90625 7.71875 13.0625 C 6.945313 12.316406 5.914063 12 4.90625 12 C 3.816406 12 2.707031 12.355469 1.9375 13.21875 L 1.9375 13.25 L 1.90625 13.28125 C 1.167969 14.203125 0.867188 15.433594 1.0625 16.65625 C 1.242188 17.777344 1.898438 18.917969 3.03125 19.65625 C 3.023438 19.769531 3 19.882813 3 20 C 3 22.605469 4.574219 24.886719 6.9375 26.46875 C 9.300781 28.050781 12.488281 29 16 29 C 19.511719 29 22.699219 28.050781 25.0625 26.46875 C 27.425781 24.886719 29 22.605469 29 20 C 29 19.882813 28.976563 19.769531 28.96875 19.65625 C 30.101563 18.917969 30.757813 17.777344 30.9375 16.65625 C 31.132813 15.433594 30.832031 14.203125 30.09375 13.28125 L 30.0625 13.25 C 29.292969 12.386719 28.183594 12 27.09375 12 C 26.085938 12 25.054688 12.316406 24.28125 13.0625 C 22.257813 11.90625 19.757813 11.175781 17 11.03125 L 17 7.65625 C 17 6.675781 17.558594 6 18.65625 6 C 19.175781 6 19.820313 6.246094 20.8125 6.59375 C 21.65625 6.890625 22.75 7.21875 24.15625 7.3125 C 24.496094 8.289063 25.414063 9 26.5 9 C 27.875 9 29 7.875 29 6.5 C 29 5.125 27.875 4 26.5 4 C 25.554688 4 24.738281 4.535156 24.3125 5.3125 C 23.113281 5.242188 22.246094 4.992188 21.46875 4.71875 C 20.566406 4.402344 19.734375 4 18.65625 4 Z M 16 13 C 19.152344 13 21.964844 13.867188 23.9375 15.1875 C 25.910156 16.507813 27 18.203125 27 20 C 27 21.796875 25.910156 23.492188 23.9375 24.8125 C 21.964844 26.132813 19.152344 27 16 27 C 12.847656 27 10.035156 26.132813 8.0625 24.8125 C 6.089844 23.492188 5 21.796875 5 20 C 5 18.203125 6.089844 16.507813 8.0625 15.1875 C 10.035156 13.867188 12.847656 13 16 13 Z M 4.90625 14 C 5.285156 14 5.660156 14.09375 5.96875 14.25 C 4.882813 15.160156 4.039063 16.242188 3.53125 17.4375 C 3.277344 17.117188 3.125 16.734375 3.0625 16.34375 C 2.953125 15.671875 3.148438 14.976563 3.46875 14.5625 C 3.472656 14.554688 3.464844 14.539063 3.46875 14.53125 C 3.773438 14.210938 4.3125 14 4.90625 14 Z M 27.09375 14 C 27.6875 14 28.226563 14.210938 28.53125 14.53125 C 28.535156 14.535156 28.527344 14.558594 28.53125 14.5625 C 28.851563 14.976563 29.046875 15.671875 28.9375 16.34375 C 28.875 16.734375 28.722656 17.117188 28.46875 17.4375 C 27.960938 16.242188 27.117188 15.160156 26.03125 14.25 C 26.339844 14.09375 26.714844 14 27.09375 14 Z M 11 16 C 9.894531 16 9 16.894531 9 18 C 9 19.105469 9.894531 20 11 20 C 12.105469 20 13 19.105469 13 18 C 13 16.894531 12.105469 16 11 16 Z M 21 16 C 19.894531 16 19 16.894531 19 18 C 19 19.105469 19.894531 20 21 20 C 22.105469 20 23 19.105469 23 18 C 23 16.894531 22.105469 16 21 16 Z M 21.25 21.53125 C 20.101563 22.597656 18.171875 23.28125 16 23.28125 C 13.828125 23.28125 11.898438 22.589844 10.75 21.65625 C 11.390625 23.390625 13.445313 25 16 25 C 18.554688 25 20.609375 23.398438 21.25 21.53125 Z"/></svg></a> <a href="https://twitter.com/graphql"><svg role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/></svg></a> <a href="https://graphql.org/learn/"><svg viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg"><g transform="matrix(1, 0, 0, 1, 13.859316, 9.109739)"><g><g><path d="M340.732,0H55v485h375V94.518L340.732,0z M345,26.364L405.1,90H345V26.364z M415,470H70V15h260v90h85V470z"/><rect x="102.5" y="191" width="280" height="15"/><rect x="102.5" y="141" width="120" height="15"/><rect x="102.5" y="241" width="280" height="15"/><rect x="102.5" y="291" width="280" height="15"/><rect x="102.5" y="341" width="280" height="15"/><rect x="102.5" y="391" width="280" height="15"/></g></g></g></svg></a></div>

* GraphQL is a <a href="../lists/languages.html?filter=queryLanguage">query language</a> created in 2012 by Lee Byron.
 link ../lists/languages.html?filter=2012 2012
 link ../lists/creators.html#leeByron Lee Byron

kpiTable
 #87 <span title="TotalRank: 276 Jobs: 103 Users: 85 Facts: 88 Links: 491">on PLDB</span>
 11 Years Old
 18.7k <span title="Crude user estimate from a linear model.">Users</span>
 11 <span title="Books about or leveraging GraphQL">Books</span>
 7 <span title="Academic publications about or leveraging GraphQL">Papers</span>
 1 <span title="GraphQL repos on GitHub.">Repos</span>

monacoEditor graphql
 {
     "Hello World"
 }

* GraphQL is a data query language developed internally by Facebook in 2012 before being publicly released in 2015. It provides an alternative to REST and ad-hoc webservice architectures.. It allows clients to define the structure of the data required, and exactly the same structure of the data is returned from the server. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/GraphQL Read more on Wikipedia...

- GraphQL website
 http://graphql.org/
- GraphQL Wikipedia page
 https://en.wikipedia.org/wiki/GraphQL
- GraphQL docs
 https://graphql.org/learn/
- There are at least 1 GraphQL repos on <a href="https://github.com/search?q=language:GraphQL">GitHub</a>
- GraphQL first developed in <a href="../lists/originCommunities.html#facebook">Facebook</a>
- file extensions for GraphQL include graphql, gql and graphqls
- GraphQL on Twitter
 https://twitter.com/graphql
- There are 17,480 members in the <a href="https://reddit.com/r/GraphQL">GraphQL subreddit</a>
- <a href="antlr.html">ANTLR</a> <a href="https://github.com/antlr/grammars-v4/tree/master/graphql">grammar</a> for GraphQL
- GraphQL <a href="language-server-protocol.html">LSP</a> <a href="https://github.com/Mayank1791989/gql-language-server">implementation</a>
- <a href="monaco.html">Monaco</a> <a href="https://github.com/microsoft/monaco-editor/tree/main/src/basic-languages/graphql">package</a> for syntax highlighting GraphQL
- GitHub supports <a href="https://github.com/rmosolgo/language-graphql" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for GraphQL
- Annual Reports for GraphQL
 https://graphql.org/foundation/annual-reports/
- Release Notes for GraphQL
 https://github.com/graphql/graphql-js/releases
- Official Blog page for GraphQL
 https://graphql.org/blog/
- Events page for GraphQL
 https://graphql.org/community/upcoming-events/
- Frequently Asked Questions for GraphQL
 https://graphql.org/faq/
- <a href="http://graphql.org/">graphql.org</a> was registered in 2015
- See also: (3 related languages)<a href="javascript.html">JavaScript</a>, <a href="ruby.html">Ruby</a>, <a href="scala.html">Scala</a>
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://pldb.com/edit/graphql">Improve our GraphQL file</a>

html <br>

codeWithHeader Example from <a href='https://github.com/leachim6/hello-world/blob/main/g/GraphQL.graphql'>hello-world</a>:
 {
     &quot;Hello World&quot;
 }

codeWithHeader Example from <a href='https://github.com/rmosolgo/language-graphql'>Linguist</a>:
 # Copyright (c) 2015, Facebook, Inc.
 # All rights reserved.
 #
 # This source code is licensed under the BSD-style license found in the
 # LICENSE file in the root directory of this source tree. An additional grant
 # of patent rights can be found in the PATENTS file in the same directory.
 
 schema {
   query: QueryType
   mutation: MutationType
 }
 
 type Foo implements Bar {
   one: Type
   two(argument: InputType!): Type
   three(argument: InputType, other: String): Int
   four(argument: String = &quot;string&quot;): String
   five(argument: [String] = [&quot;string&quot;, &quot;string&quot;]): String
   six(argument: InputType = {key: &quot;value&quot;}): Type
 }
 
 interface Bar {
   one: Type
   four(argument: String = &quot;string&quot;): String
 }
 
 union Feed = Story | Article | Advert
 
 scalar CustomScalar
 
 enum Site {
   DESKTOP
   MOBILE
 }
 
 input InputType {
   key: String!
   answer: Int = 42
 }
 
 extend type Foo {
   seven(argument: [String]): Type
 }
 
 directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
 
 directive @include(if: Boolean!)
   on FIELD
    | FRAGMENT_SPREAD
    | INLINE_FRAGMENT
 

## <a href="../lists/keywords.html?filter=graphql">Keywords</a> in GraphQL
* null true false query mutation subscription extend schema directive scalar type interface union enum input implements fragment on

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   # A comment
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token #
  Example
   # A comment
 row
  Feature hasIds
  FeatureLink ../features/hasIds.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   # The ID scalar type represents a unique identifier, often used to refetch an object or as the key for a cache. The ID type is serialized in the same way as a String; however, defining it as an ID signifies that it is not intended to be human‐readable.
   query {
     hero {
       name
     }
     droid(id: "2000") {
       name
     }
   }
 row
  Feature Lists
  FeatureLink ../features/hasLists.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Union Types
  FeatureLink ../features/hasUnionTypes.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   union SearchResult = Human | Droid | Starship
 row
  Feature Strings
  FeatureLink ../features/hasStrings.html
  Supported <span class="hasFeature">✓</span>
  Token "
  Example
 row
  Feature Integers
  FeatureLink ../features/hasIntegers.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Interfaces
  FeatureLink ../features/hasInterfaces.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   interface Character {
    id: ID!
    name: String!
    friends: [Character]
    appearsIn: [Episode]!
   }
   type Human implements Character {
     id: ID!
     name: String!
     friends: [Character]
     appearsIn: [Episode]!
     starships: [Starship]
     totalCredits: Int
   }
   type Droid implements Character {
     id: ID!
     name: String!
     friends: [Character]
     appearsIn: [Episode]!
     primaryFunction: String
   }
 row
  Feature Floats
  FeatureLink ../features/hasFloats.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Enums
  FeatureLink ../features/hasEnums.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   enum Episode {
     NEWHOPE
     EMPIRE
     JEDI
   }
 row
  Feature Booleans
  FeatureLink ../features/hasBooleans.html
  Supported <span class="hasFeature">✓</span>
  Token true false
  Example
 row
  Feature Case Insensitive Identifiers
  FeatureLink ../features/hasCaseInsensitiveIdentifiers.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

## Books about GraphQL from ISBNdb
pipeTable
 title|titleLink|authors|year|publisher
 React Quickly: Painless web apps with React, JSX, Redux, and GraphQL|https://isbndb.com/book/9781617293344|Mardan, Azat|2017|Manning Publications
 Hands-On Full-Stack Web Development with GraphQL and React: Build scalable full-stack applications while learning to solve complex problems with GraphQL|https://isbndb.com/book/9781789135763|Grebe, Sebastian|2019|Packt Publishing
 Full-Stack React, TypeScript, and Node: Build cloud-ready web applications using React 17 with Hooks and GraphQL|https://isbndb.com/book/9781839214691|Choi, David|2020|Packt Publishing
 Mastering React Test-Driven Development: Build rock-solid, well-tested web apps with React, Redux and GraphQL|https://isbndb.com/book/9781789138788|Irvine, Daniel|2019|Packt Publishing
 Visual Design of GraphQL Data: A Practical Introduction with Legacy Data and Neo4j|https://isbndb.com/book/9781484239049|Frisendal, Thomas|2018|Apress
 Learning GraphQL|https://isbndb.com/book/9781492044864|Eve Porcello; Alex  Banks|20180809|O'Reilly Media, Inc.
 GraphQL in Action|https://isbndb.com/book/9781638350859|Samer Buna|20210221|Simon & Schuster
 Learning GraphQL and Relay|https://isbndb.com/book/9781786461971|Samer Buna|2016-08-30|Packt Publishing
 Craft GraphQL APIs in Elixir with Absinthe|https://isbndb.com/book/9781680505931|Bruce Williams; Ben  Wilson|20180327|O'Reilly Media, Inc.
 Full Stack Development with Angular and GraphQL|https://isbndb.com/book/9781800209756|Ahmed Bouchefra|2022-03-30|Packt Publishing
 Full-Stack Web Development with GraphQL and React|https://isbndb.com/book/9781801079174|Sebastian Grebe|28-02-2022|Packt Publishing

## Publications about GraphQL from Semantic Scholar
pipeTable
 title|titleLink|authors|year|citations|influentialCitations
 Semantics and Complexity of GraphQL|https://www.semanticscholar.org/paper/cf1ac803fcd5339063003a7847556055d25983d7|O. Hartig and Jorge Pérez|2018|51|6
 An Empirical Study of GraphQL Schemas|https://www.semanticscholar.org/paper/512fb84e420f7001c9b4ba1e7b485d4cd06ba1cb|Erik Wittern and Alan Cha and James C. Davis and Guillaume Baudart and Louis Mandel|2019|19|0
 Implementing GraphQL as a Query Language for Deductive Databases in SWI-Prolog Using DCGs, Quasi Quotations, and Dicts|https://www.semanticscholar.org/paper/6fc5114fada3dc4eaa0a33345522c5b353b3d702|Falco Nogatz and D. Seipel|2017|14|2
 Comparative Analysis Between Standards Oriented to Web Services: SOAP, REST and GRAPHQL|https://www.semanticscholar.org/paper/1d0a063e1ae7cff3197be11322ecf7f63740c4c2|Jaime Sayago Heredia and Evelin Flores-García and Andrés Solano|2019|4|0
 morph-GraphQL: GraphQL Servers Generation from R2RML Mappings (S)|https://www.semanticscholar.org/paper/c0f1a7e772591f87b5ef2a232d3196ef5752a9d3|Freddy Priyatna and David Chaves-Fraga and Ahmad Alobaid and Óscar Corcho|2019|4|0
 Exploiting Declarative Mapping Rules for Generating GraphQL Servers with Morph-GraphQL|https://www.semanticscholar.org/paper/08e989912b7ed00b32195c269edea18edcc33f6b|David Chaves-Fraga and Freddy Priyatna and Ahmad Alobaid and Óscar Corcho|2020|3|0
 COMPARATIVE ANALYSIS OF WEB APPLICATION PERFORMANCE IN CASE OF USING REST VERSUS GRAPHQL|https://www.semanticscholar.org/paper/bc1399b7e27c20633989a561d8cfd00f746391af|M. Vesić and N. Kojić|2020|1|0

keyboardNav common-lisp.html vhdl.html

import ../footer.scroll
