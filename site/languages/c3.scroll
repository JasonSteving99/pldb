import header.scroll

title C3

title C3 - Programming language
 hidden

html
 <a class="prevLang" href="ats.html">&lt;</a>
 <a class="nextLang" href="dafny.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/c3.pldb

startColumns 4

html <div class="quickLinks"><a href="http://www.c3-lang.org/"><svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M12.7166 3.79541C12.2835 3.49716 11.7165 3.49716 11.2834 3.79541L4.14336 8.7121C3.81027 8.94146 3.60747 9.31108 3.59247 9.70797C3.54064 11.0799 3.4857 13.4824 3.63658 15.1877C3.7504 16.4742 4.05336 18.1747 4.29944 19.4256C4.41371 20.0066 4.91937 20.4284 5.52037 20.4284H8.84433C8.98594 20.4284 9.10074 20.3111 9.10074 20.1665V15.9754C9.10074 14.9627 9.90433 14.1417 10.8956 14.1417H13.4091C14.4004 14.1417 15.204 14.9627 15.204 15.9754V20.1665C15.204 20.3111 15.3188 20.4284 15.4604 20.4284H18.4796C19.0806 20.4284 19.5863 20.0066 19.7006 19.4256C19.9466 18.1747 20.2496 16.4742 20.3634 15.1877C20.5143 13.4824 20.4594 11.0799 20.4075 9.70797C20.3925 9.31108 20.1897 8.94146 19.8566 8.7121L12.7166 3.79541ZM10.4235 2.49217C11.3764 1.83602 12.6236 1.83602 13.5765 2.49217L20.7165 7.40886C21.4457 7.91098 21.9104 8.73651 21.9448 9.64736C21.9966 11.0178 22.0564 13.5119 21.8956 15.3292C21.7738 16.7067 21.4561 18.4786 21.2089 19.7353C20.9461 21.0711 19.7924 22.0001 18.4796 22.0001H15.4604C14.4691 22.0001 13.6655 21.1791 13.6655 20.1665V15.9754C13.6655 15.8307 13.5507 15.7134 13.4091 15.7134H10.8956C10.754 15.7134 10.6392 15.8307 10.6392 15.9754V20.1665C10.6392 21.1791 9.83561 22.0001 8.84433 22.0001H5.52037C4.20761 22.0001 3.05389 21.0711 2.79113 19.7353C2.54392 18.4786 2.22624 16.7067 2.10437 15.3292C1.94358 13.5119 2.00338 11.0178 2.05515 9.64736C2.08957 8.73652 2.55427 7.91098 3.28346 7.40886L10.4235 2.49217Z"/></svg></a> <a href="https://github.com/c3lang/c3c"><svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"/></svg></a> <a href="https://twitter.com/C3Lang"><svg role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/></svg></a></div>

* C3 is a <a href="../lists/languages.html?filter=pl">programming language</a> created in 2019 by Christoffer Lernö.
 link ../lists/languages.html?filter=2019 2019
 link ../lists/creators.html#christofferLerno Christoffer Lernö

kpiTable
 #281 <span title="TotalRank: 680 Jobs: 103 Users: 530 Facts: 47 Links: 667">on PLDB</span>
 4 Years Old
 1.0k <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging C3">Books</span>
 0 <span title="Academic publications about or leveraging C3">Papers</span>

* C3 is a programming language that builds on the syntax and semantics of the C language, with the goal of evolving it while still retaining familiarity for C programmers.

- C3 website
 http://www.c3-lang.org/
- C3 is developed on <a href="https://github.com/c3lang/c3c">GitHub</a> and has 886 stars
- C3 first developed in <a href="../lists/originCommunities.html#theC3LanguageProject">The C3 Language Project</a>
- file extensions for C3 include c3 and c3i
- C3 on Twitter
 https://twitter.com/C3Lang
- Explore C3 snippets on <a href="https://rosettacode.org/wiki/Category:C3">Rosetta Code</a>
- Official Blog page for C3
 https://c3.handmade.network/blog
- <a href="http://www.c3-lang.org/">c3-lang.org</a> was registered in 2019
- Read more about C3 on the web: 1. 2.
 https://www.reddit.com/r/ProgrammingLanguages/comments/ex7hpp/february_2020_monthly_what_are_you_working_on/fgdpuki/ 1.
 https://news.ycombinator.com/item?id=32005678 2.
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://pldb.com/edit/c3">Improve our C3 file</a>

html <br>

codeWithHeader Example from the web:
 module stack &lt;Type&gt;;
 // Above: the parameterized type is applied to the entire module.
 import std::mem;
 
 struct Stack
 {
     usize capacity;
     usize size;
     Type* elems;
 }
 
 // The type methods offers dot syntax calls,
 // so this function can either be called 
 // Stack.push(&amp;my_stack, ...) or
 // my_stack.push(...)
 fn void Stack.push(Stack* this, Type element)
 {
     if (this.capacity == this.size)
     {
         this.capacity *= 2;
         this.elems = mem::realloc(this.elems, $sizeof(Type) * this.capacity);
     }
     this.elems[this.size++] = element;
 }
 
 fn Type Stack.pop(Stack* this)
 {
     assert(this.size &gt; 0);
     return this.elems[--this.size];
 }
 
 fn bool Stack.empty(Stack* this)
 {
     return !this.size;
 }

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Switch Statements
  FeatureLink ../features/hasSwitch.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   switch(expression) 
   {
      case 1:
         do_something();
      case 2:
         if (x > 0) nextcase 1; // Jump to 1
         nextcase; // Jump to the next case.
      default:
         foo();
   }
   
 row
  Feature Structs
  FeatureLink ../features/hasStructs.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   struct Test
   {
      int x;
      float y;
      String z;
   }  
 row
  Feature Strings
  FeatureLink ../features/hasStrings.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   String s = "hello";
   String t = `I say "hello"`;
 row
  Feature Ternary operators
  FeatureLink ../features/hasTernaryOperators.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   int foo = x ? 1 : 0;
 row
  Feature Scientific Notation
  FeatureLink ../features/hasScientificNotation.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature While Loops
  FeatureLink ../features/hasWhileLoops.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   while (int x = foo(); x > 0) 
   {
     sum += x;
   }
 row
  Feature Conditionals
  FeatureLink ../features/hasConditionals.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Assignment
  FeatureLink ../features/hasAssignment.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   a = b;
 row
  Feature Case Sensitivity
  FeatureLink ../features/isCaseSensitive.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Pointers
  FeatureLink ../features/hasPointers.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Variadic Functions
  FeatureLink ../features/hasVariadicFunctions.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   fn void foo_typed(int x, int... arg) { ... }
   fn void foo_untyped(int x, ...arg) 
   ...
   foo_typed(1, 2, 3);
   foo_untyped(1, "hello", 1.2);
 row
  Feature hasReservedWords
  FeatureLink ../features/hasReservedWords.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Module Pattern
  FeatureLink ../features/hasModules.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   module my_module::submodule;
   ...
 row
  Feature Operator Overloading
  FeatureLink ../features/hasOperatorOverloading.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   fn int IntList.get(IntList* this, int idx) @operator([])
   {
      return this.vals[idx];
   }
   ...
   IntList x = ...
   foo(x[1]);
 row
  Feature Multiline Strings
  FeatureLink ../features/hasMultilineStrings.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   String s = `this
    string is multiline`;
 row
  Feature MultiLine Comments
  FeatureLink ../features/hasMultiLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token /* */
  Example
   /* 
     Multiline comment
   */
 row
  Feature Methods
  FeatureLink ../features/hasMethods.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   fn int Foo.get_value(Foo* this)
   {
      return this.value;
   }
 row
  Feature File Imports
  FeatureLink ../features/hasImports.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   import std::io;
 row
  Feature hasForEachLoops
  FeatureLink ../features/hasForEachLoops.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   foreach (x : list)
   {
     foo(x);
   }  
 row
  Feature Macros
  FeatureLink ../features/hasMacros.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   macro square(x)
   {
     return x * x;
   }
 row
  Feature Union Types
  FeatureLink ../features/hasUnionTypes.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   union Foo
   {
     int x;
     float f;
     struct 
     {
       char[2] z;
     }  
   }  
 row
  Feature Single-Type Arrays
  FeatureLink ../features/hasSingleTypeArrays.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Unary Operators
  FeatureLink ../features/hasUnaryOperators.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Enums
  FeatureLink ../features/hasEnums.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   enum TestEnum : int
   {
      FOO,
      BAR,
      BAZ
   }
 row
  Feature Doc comments
  FeatureLink ../features/hasDocComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   /**
    * @param [in] foo "The foo value"
    * @return "the toal foo count"
    **/
 row
  Feature Constants
  FeatureLink ../features/hasConstants.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   const FOO = 123;
   const void* BAR = null;
 row
  Feature Access Modifiers
  FeatureLink ../features/hasAccessModifiers.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Zero-based numbering
  FeatureLink ../features/hasZeroBasedNumbering.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Default Parameters Pattern
  FeatureLink ../features/hasDefaultParameters.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   fn void test(int x = 10) { ... }  
 row
  Feature Assert Statements
  FeatureLink ../features/hasAssertStatements.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   assert(a > 0, "Expected a positive number");
   $assert(Foo.sizeof == 8, "Foo sizecheck at compile time failed");
 row
  Feature Manual Memory Management
  FeatureLink ../features/hasManualMemoryManagement.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Increment and decrement operators
  FeatureLink ../features/hasIncrementAndDecrementOperators.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   i++; --j;
 row
  Feature Integers
  FeatureLink ../features/hasIntegers.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   int x = 314159;
 row
  Feature Namespaces
  FeatureLink ../features/hasNamespaces.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   import std::io;
   ...
   io::printf("%d", i);
 row
  Feature Type Casting
  FeatureLink ../features/hasExplicitTypeCasting.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   double d = 3.3;
   int x = (int)d;
 row
  Feature Binary Literals
  FeatureLink ../features/hasBinaryNumbers.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   0b110011
 row
  Feature Null
  FeatureLink ../features/hasNull.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Lazy Evaluation
  FeatureLink ../features/hasLazyEvaluation.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   fn void print(String s)
   {
      io::printfn("Said: %s", s);
   }  
   macro @foo(bool run, #lazy)
   {
     if (run) #lazy;
   }
   // Only "Said: Hello" is printed:
   @foo(false, print("Bye"));
   @foo(true, print("Hello"));
 row
  Feature hasLabels
  FeatureLink ../features/hasLabels.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   while FOO: (x > 0)
   {
     for (int i = 0; i < 10; i++
     {
       x = baz();
       if (x > i) break FOO;
     }
   }
 row
  Feature Inheritance
  FeatureLink ../features/hasInheritance.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Functions
  FeatureLink ../features/hasFunctions.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Implicit Type Casting
  FeatureLink ../features/hasImplicitTypeConversions.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature hasIfElses
  FeatureLink ../features/hasIfElses.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature hasIfs
  FeatureLink ../features/hasIfs.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Hexadecimals
  FeatureLink ../features/hasHexadecimals.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature hasForLoops
  FeatureLink ../features/hasForLoops.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Expressions
  FeatureLink ../features/hasExpressions.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature hasEscapeCharacters
  FeatureLink ../features/hasEscapeCharacters.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   "\e\n\r"
 row
  Feature hasContinue
  FeatureLink ../features/hasContinue.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature hasBreak
  FeatureLink ../features/hasBreak.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature hasBoundedCheckedArrays
  FeatureLink ../features/hasBoundedCheckedArrays.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature hasArraySlicingSyntax
  FeatureLink ../features/hasArraySlicingSyntax.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   int[] slice1 = array[0..5]; // start..end
   int[] slice2 = array[0:6]; // start:length
 row
  Feature Octals
  FeatureLink ../features/hasOctals.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   0o177
 row
  Feature Bitwise Operators
  FeatureLink ../features/hasBitWiseOperators.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   int i = b << 4 + x; // Same as (b << 4) + x  
 row
  Feature Booleans
  FeatureLink ../features/hasBooleans.html
  Supported <span class="hasFeature">✓</span>
  Token true false
  Example
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // A comment
   /* Another comment */
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token //
  Example
   // A comment
 row
  Feature Garbage Collection
  FeatureLink ../features/hasGarbageCollection.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Gotos
  FeatureLink ../features/hasGotos.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Case Insensitive Identifiers
  FeatureLink ../features/hasCaseInsensitiveIdentifiers.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Constructors
  FeatureLink ../features/hasConstructors.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Variable Substitution Syntax
  FeatureLink ../features/hasVariableSubstitutionSyntax.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature hasUserDefinedOperators
  FeatureLink ../features/hasUserDefinedOperators.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Units of Measure
  FeatureLink ../features/hasUnitsOfMeasure.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Unicode Identifiers
  FeatureLink ../features/hasUnicodeIdentifiers.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Abstract Types
  FeatureLink ../features/hasAbstractTypes.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Classes
  FeatureLink ../features/hasClasses.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Directives
  FeatureLink ../features/hasDirectives.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Multiple Inheritance
  FeatureLink ../features/hasMultipleInheritance.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature hasSExpressions
  FeatureLink ../features/hasSExpressions.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Pipes
  FeatureLink ../features/hasPipes.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Message Passing
  FeatureLink ../features/hasMessagePassing.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Magic Getters and Setters
  FeatureLink ../features/hasMagicGettersAndSetters.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Homoiconicity
  FeatureLink ../features/hasHomoiconicity.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Function Composition
  FeatureLink ../features/hasFunctionComposition.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Function Overloading
  FeatureLink ../features/hasFunctionOverloading.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Here Document
  FeatureLink ../features/hasHereDocs.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Dynamic Properties
  FeatureLink ../features/hasDynamicProperties.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Duck Typing
  FeatureLink ../features/hasDuckTyping.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature hasBuiltInRegex
  FeatureLink ../features/hasBuiltInRegex.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Async Await
  FeatureLink ../features/hasAsyncAwait.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Regular Expression Syntax Sugar
  FeatureLink ../features/hasRegularExpressionsSyntaxSugar.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

keyboardNav ats.html dafny.html

import ../footer.scroll
