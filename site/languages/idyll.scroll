import header.scroll

title idyll

title idyll - Programming language
 hidden

html
 <a class="prevLang" href="nearley.html">&lt;</a>
 <a class="nextLang" href="jinja.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/idyll.pldb

startColumns 4

html <div class="quickLinks"><a href="https://idyll-lang.org/"><svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M12.7166 3.79541C12.2835 3.49716 11.7165 3.49716 11.2834 3.79541L4.14336 8.7121C3.81027 8.94146 3.60747 9.31108 3.59247 9.70797C3.54064 11.0799 3.4857 13.4824 3.63658 15.1877C3.7504 16.4742 4.05336 18.1747 4.29944 19.4256C4.41371 20.0066 4.91937 20.4284 5.52037 20.4284H8.84433C8.98594 20.4284 9.10074 20.3111 9.10074 20.1665V15.9754C9.10074 14.9627 9.90433 14.1417 10.8956 14.1417H13.4091C14.4004 14.1417 15.204 14.9627 15.204 15.9754V20.1665C15.204 20.3111 15.3188 20.4284 15.4604 20.4284H18.4796C19.0806 20.4284 19.5863 20.0066 19.7006 19.4256C19.9466 18.1747 20.2496 16.4742 20.3634 15.1877C20.5143 13.4824 20.4594 11.0799 20.4075 9.70797C20.3925 9.31108 20.1897 8.94146 19.8566 8.7121L12.7166 3.79541ZM10.4235 2.49217C11.3764 1.83602 12.6236 1.83602 13.5765 2.49217L20.7165 7.40886C21.4457 7.91098 21.9104 8.73651 21.9448 9.64736C21.9966 11.0178 22.0564 13.5119 21.8956 15.3292C21.7738 16.7067 21.4561 18.4786 21.2089 19.7353C20.9461 21.0711 19.7924 22.0001 18.4796 22.0001H15.4604C14.4691 22.0001 13.6655 21.1791 13.6655 20.1665V15.9754C13.6655 15.8307 13.5507 15.7134 13.4091 15.7134H10.8956C10.754 15.7134 10.6392 15.8307 10.6392 15.9754V20.1665C10.6392 21.1791 9.83561 22.0001 8.84433 22.0001H5.52037C4.20761 22.0001 3.05389 21.0711 2.79113 19.7353C2.54392 18.4786 2.22624 16.7067 2.10437 15.3292C1.94358 13.5119 2.00338 11.0178 2.05515 9.64736C2.08957 8.73652 2.55427 7.91098 3.28346 7.40886L10.4235 2.49217Z"/></svg></a> <a href="https://github.com/idyll-lang/idyll"><svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"/></svg></a> <a href="https://twitter.com/idyll_lang"><svg role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/></svg></a> <a href="https://idyll-lang.org/docs"><svg viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg"><g transform="matrix(1, 0, 0, 1, 13.859316, 9.109739)"><g><g><path d="M340.732,0H55v485h375V94.518L340.732,0z M345,26.364L405.1,90H345V26.364z M415,470H70V15h260v90h85V470z"/><rect x="102.5" y="191" width="280" height="15"/><rect x="102.5" y="141" width="120" height="15"/><rect x="102.5" y="241" width="280" height="15"/><rect x="102.5" y="291" width="280" height="15"/><rect x="102.5" y="341" width="280" height="15"/><rect x="102.5" y="391" width="280" height="15"/></g></g></g></svg></a></div>

* idyll is a <a href="../lists/languages.html?filter=pl">programming language</a> created in 2017.
 link ../lists/languages.html?filter=2017 2017

kpiTable
 #163 <span title="TotalRank: 464 Jobs: 103 Users: 345 Facts: 16 Links: 972">on PLDB</span>
 6 Years Old
 2.2k <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging idyll">Books</span>
 0 <span title="Academic publications about or leveraging idyll">Papers</span>

* Idyll is a markup language and toolkit for writing interactive articles. Idyll's reactive document model and standard component library decrease the amount of code needed to create high quality multimedia narratives. Idyll uses web standards to produce output that will load quickly in any web browser and is fully extensible. Idyll enables collaboration between programmers and journalists, researchers and designers. Those familiar with JavaScript can write custom components using tools like D3 or React.

- idyll website
 https://idyll-lang.org/
- idyll is developed on <a href="https://github.com/idyll-lang/idyll">GitHub</a> and has 1,892 stars
- idyll docs
 https://idyll-lang.org/docs
- idyll first developed in <a href="../lists/originCommunities.html#httpsGithubComIdyllLang">https://github.com/idyll-lang</a>
- idyll on Twitter
 https://twitter.com/idyll_lang
- <a href="https://idyll-lang.org/">idyll-lang.org</a> was registered in 2017
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://pldb.com/edit/idyll">Improve our idyll file</a>

html <br>

codeWithHeader Example from the web:
 [meta
   title:&quot;How To: Tune a Guitar&quot;
   description:&quot;An interactive audio guide with guitars and a little music theory.&quot;
   twitterHandle:&quot;mathisonian&quot;
   shareImageUrl:&quot;https://mathisonian.github.io/idyll/how-to-tune-a-guitar/images/share.png&quot;
   shareImageWidth:&quot;1940&quot;
   shareImageHeight:&quot;970&quot;
   /]
 
 
 [Header
   title:&quot;Tune a Guitar&quot;
   authors:`[{
     name: &quot;Matthew Conlen&quot;,
     link: &quot;https://twitter.com/mathisonian&quot;
   }, {
     name: &quot;Alex Kale&quot;,
     link: &quot;https://github.com/kalealex&quot;
   }]` /]
 
 
 
 [var name:&quot;currentFrequency&quot; value:108 /]
 [var name:&quot;guitarState&quot; value:&quot;default&quot; /]
 [var name:&quot;fft&quot; value:` null ` /]
 [var name:&quot;waveform&quot; value:` null ` /]
 [var name:&quot;isInTune&quot; value:false /]
 
 [var name:&quot;clean&quot; value:false /]
 
 [var name:&quot;playRiff&quot; value:false /]
 [var name:&quot;playReference&quot; value:false /]
 [var name:&quot;detuneGuitar&quot; value:false /]
 [var name:&quot;autotuneGuitar&quot; value:false /]
 [var name:&quot;playNotes&quot; value:false /]
 [var name:&quot;playBeats&quot; value:false /]
 
 [var name:&quot;playScale&quot; value:false /]
 [var name:&quot;beatDiff&quot; value:5 /]
 
 [var name:&quot;tunerVisualization&quot; value:true /]
 
 [var name:&quot;targetNote&quot; value:&quot;E2&quot; /]
 [derived name:&quot;targetString&quot; value:`{ E2: 0, A2: 1, D3: 2, G3: 3, B3: 4, E4: 5 }[targetNote]` /]
 
 [Fixed]
   [Guitar
     src:&quot;images/svg/guitar.svg&quot;
     currentFrequency:currentFrequency
     state:guitarState
     targetNote:targetNote
     fft:fft
     waveform:waveform
     playRiff:playRiff
     isInTune:isInTune
     clean:clean
     detuneGuitar:detuneGuitar
     autotuneGuitar:autotuneGuitar
     playReference:playReference
     tunerVisualization:tunerVisualization
     playNotes:playNotes
     playScale:playScale
     playBeats:playBeats
     beatDiff:beatDiff
      /]
 [/Fixed]
 
 
 [section]
 # A Sad Guitar.
 
 Take a second and strum the guitar. It doesn&#39;t sound
 so good, does it?
 
 We&#39;ve just taken it out of storage and *it&#39;s all out of tune...*
 
 [/section]
 
 [section onEnterViewFully:`guitarState = &#39;headstock&#39;; playScale = false;`]
 # Electric Tuner to the Rescue.
 
 Tune the guitar using the tuner. Click and drag the tuning
 knobs on the right to tighten and loosen the strings.
 // Need a reward state to let them know when a string is in tune
 
 [Tuner selectedString:targetString currFreq:currentFrequency /]
 
 [conditional if:isInTune]
 Great work, scroll on.
 [/conditional]
 
 [/section]
 
 [section onEnterViewFully:`guitarState = null; playScale = false; `]
 
 [conditional if:isInTune]
 
 # A Sigh of Relief.
 
 That sounds so much better! What a difference a few hertz make. Go ahead and
 play a little something.
 
 // audio clip of guitar shredding
 
 [div className:&quot;centered&quot;]
 [button onClick:`playRiff = true `]
   Play a lick.
 [/button]
 [/div]
 [/conditional]
 
 
 [conditional if:`!isInTune `]
 
 # Keep at it.
 // the text in this section should depend on whether or not the guitar is in tune
 This doesn&#39;t sound in tune quite yet. Scroll back up and try to get all of the tuning knobs to turn green.
 
 [/conditional]
 
 [/section]
 
 [section onEnterViewFully:`guitarState = &#39;pickups&#39;; playScale = true; `]
 # How does this thing work?
 
 Guitars generate noise through the vibration of their strings. On an electric guitar such as this one,
 magnetic &quot;pick-ups&quot; convert those vibrations into an electrical signal which can then be sent to a tuner or an amplifier.
 
 
 [var name:&quot;waveInView&quot; value:false /]
 [WaveVisualizer
   waveform:waveform
   inView:waveInView
   onEnterView:`waveInView = true `
   onExitViewFully:`waveInView = false ` /]
 
 This signal can be [visualized as a raw waveform](https://pudding.cool/2018/02/waveforms/), but
 often we want to visualize the frequency instead. The [fourier transform](https://jackschaedler.github.io/circles-sines-signals/dft_introduction.html) is a mathematical  function
 that reveals the audio frequencies hidden in that wave.
 
 [var name:&quot;freqInView&quot; value:false /]
 [FreqViz
   fft:fft
   inView:freqInView
   onEnterView:`freqInView = true `
   onExitViewFully:`freqInView = false ` /]
 
 
 Strum the guitar to see the frequency
 visualized.
 
 [/section]
 
 [section onEnterViewFully:`guitarState = null; playReference = false; `]
 
 # Tuning by Ear.
 
 Now that we&#39;ve tuned the guitar using a tuner, let&#39;s try to tune the guitar by ear.
 This is more challenging, and it may take you time to master.
 
 [/section]
 
 [notification onEnterViewFully:` detuneGuitar = true; `]
 The guitar is out of tune again!
 [/notification]
 
 [section onEnterViewFully:`guitarState = &#39;headstock&#39;; playReference = true; tunerVisualization = false; `]
 # Match the Reference.
 
 We&#39;ll start by tuning to a reference note. When you manipulate the tuners on the
 right the current note will be played, as will a reference note.
 
 [div className:&quot;centered&quot;]
 [button onClick:` clean = !clean `]
   [Display value:`clean ? &quot;Turn distortion on.&quot; :  &quot;Turn distortion off.&quot; `  /]
 [/button]
 [/div]
 
 This will be easier with a cleaner sound. Match the two
 sounds to get the guitar in tune.
 
 [/section]
 
 [section onEnterView:`playReference = false; autotuneGuitar = true; ` ]
 
 # Tuning Techniques.
 
 ## Harmonic Intervals.
 // audio clip in text to illustrate intervals
 // guitar in tune here
 
 Most of the strings on a guitar are separated by an interval known as a *perfect fourth*.
 
 [div className:&quot;centered&quot;]
 [button className:&quot;interval&quot; onClick:` playNotes = &#39;E2:A2&#39; `]
 ♬ E2-A2
 [/button]
 [button className:&quot;interval&quot; onClick:` playNotes = &#39;A2:D3&#39; `]
 ♬ A2-D3
 [/button]
 [button className:&quot;interval&quot; onClick:` playNotes = &#39;D3:G3&#39; `]
 ♬ D3-G3
 [/button]
 [button className:&quot;interval&quot; onClick:` playNotes = &#39;B3:E4&#39; `]
 ♬ B3-E4
 [/button]
 [/div]
 
  The perfect fourth is beautifully resonant, but there&#39;s one pair of strings on a guitar which are not separated by a perfect fourth.
 
  The interval between the [equation]G[/equation] and [equation]B[/equation] strings is a *major third*. The major third sounds happy and uplifting.
 
 [div className:&quot;centered&quot;]
 [button className:&quot;interval&quot; onClick:` playNotes = &#39;G3:B3&#39; `]
 ♬ G3-B4
 [/button]
 [/div]
 These intervals show up all the time in music, for example, the major third can be found the first two notes of  [The Saints](https://en.wikipedia.org/wiki/ When_the_Saints_Go_Marching_In). The first two notes of [Amazing Grace](https://en.wikipedia.org/wiki/Amazing_Grace) form a perfect fourth.
 
 Learning to hear these intervals will help you tune your guitar without a tuner.
 
 ## Find the beat.
 
 [p onEnterViewFully:` clean = true ` ]
 When two strings are played together, they produce a third higher frequency known as an overtone.
 [/p]
 
 // This overtune frequency is the least common multiple of the two component frequencies, which is amplified by the confluence of the two sound waves.
 
 // For the purpose of tuning a guitar by ear, you just need to recognize that when two strings are played together they result in a higher frequency. We can see this  amplified overtone on the righthand side of the frequency visualizer.
 // show frequency visualizer here? trigger example?
 // However, when the two strings are not perfectly in tune, the overtone is amplified inconsistently over time.
 // This produces a rhythmic pulsing or &quot;beats&quot; in the overtone which you can hear if you listen carefully.
 
 When the two strings are not perfectly in tune, the overtone is inconsistent over time. This produces a wobbling, *a beat*, in the overtone which you can hear if you  listen carefully.
 
 Play notes with a [Dynamic value:beatDiff min:0 max:20 step:0.05 /] Hz difference:
 
 [div className:&quot;centered&quot;]
   [button onClick:` playBeats = true; ` ]
     Listen for the beats!
   [/button]
   [button onClick:` clean = !clean `]
     [Display value:`clean ? &quot;Turn distortion on.&quot; :  &quot;Turn distortion off.&quot; `  /]
   [/button]
 [/div]
 
 // These beats also show up in the frequency visualizer.
 // here, an illustrative example of beats changing with intonation would be nice
 // will find audio file
 [var name:&quot;freq3InView&quot; value:false /]
 [FreqViz
   fft:fft
   inView:freq3InView
   showBeats:false
   onEnterView:`freq3InView = true `
   onExitViewFully:`freq3InView = false ` /]
 
 As you get a pair of strings closer in tune, the beats will slow down until the overtone is perfectly amplified.
 Listening for the slowing of these beats is a helpful cue for tuning.
 
 [/section]
 
 [section]
 
 # Practice makes perfect.
 
 Try tuning the guitar by listening for the relationships between adjacent strings and the beats in the resultant overtone.
 
 [var name:&quot;vizMode&quot; value:0 /]
 [div className:&quot;centered&quot;]
 
 [button onClick:` vizMode = (vizMode + 1) % 3 `]
   [Display value:`[&quot;Show tuner&quot;, &quot;Show wave&quot;, &quot;Show frequencies&quot;][vizMode] `  /]
 [/button]
 [button onClick:` clean = !clean `]
   [Display value:`clean ? &quot;Add distortion&quot; :  &quot;Remove distortion&quot; `  /]
 [/button]
 [button className:&quot;tune-action&quot; onClick:` autotuneGuitar = true `]
 Tune Guitar
 [/button]
 [button className:&quot;tune-action&quot; onClick:` detuneGuitar = true `]
 Detune Guitar
 [/button]
 [/div]
 
 [div className:&quot;centered&quot;]
 [/div]
 
 
 [var name:&quot;freq2InView&quot; value:false /]
 [div style:`{display: vizMode === 0 ? &#39;block&#39; : &#39;none&#39;}`]
 [FreqViz
   fft:fft
   inView:freq2InView
   onEnterView:`freq2InView = true `
   onExitViewFully:`freq2InView = false ` /]
 [/div]
 
 [div style:`{display: vizMode === 1 ? &#39;block&#39; : &#39;none&#39;}`]
   [Tuner selectedString:targetString currFreq:currentFrequency /]
 [/div]
 
 
 [div style:`{display: vizMode === 2 ? &#39;block&#39; : &#39;none&#39;}`]
   [WaveVisualizer waveform:waveform inView:`vizMode === 2` /]
 [/div]
 
 
 
 
 [/section]
 
 
 [section]
 
 # About this.
 
 This page was built using [Idyll](https://idyll-lang.org), a
 markup language for interactive documents. The guitar was
 created using [Sketch Interactive Export](https://github.com/mathisonian/sketch-interactive-export),
  [D3](http://d3js.org/), and a modified version of [Tone.js](https://tonejs.github.io/). Audio samples were
  provided by [freesound.org user SpeedY](https://freesound.org/people/SpeedY/).
 
 This project
 is from the [Interactive Data Lab](https://idl.cs.washington.edu/) at the [University of Washington](https://www.cs.washington.edu/).
 
 [/section]
 
 
 [analytics google:&quot;UA-108267630-1&quot; /]

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Booleans
  FeatureLink ../features/hasBooleans.html
  Supported <span class="hasFeature">✓</span>
  Token true false
  Example
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // A comment
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token //
  Example
   // A comment
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

## HackerNews discussions of idyll

pipeTable
 title|titleLink|date|score|comments
 Idyll: Interactive Document Language|https://news.ycombinator.com/item?id=15204241|09/08/2017|195|18

keyboardNav nearley.html jinja.html

import ../footer.scroll
